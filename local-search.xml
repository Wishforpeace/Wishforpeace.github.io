<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Docker快速入门</title>
    <link href="/2022/07/13/Docker%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    <url>/2022/07/13/Docker%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Docker简介和安装"><a href="#1-Docker简介和安装" class="headerlink" title="1.Docker简介和安装"></a>1.Docker简介和安装</h1><blockquote><p>Docker是一个打包、分发、部署的工具</p><p>轻量虚拟机，只虚拟需要的运行环境</p></blockquote><h2 id="跟普通虚拟机的对比"><a href="#跟普通虚拟机的对比" class="headerlink" title="跟普通虚拟机的对比"></a>跟普通虚拟机的对比</h2><table><thead><tr><th>特性</th><th>普通虚拟机</th><th>Docker</th></tr></thead><tbody><tr><td>跨平台</td><td>通常只能在桌面级系统运行，例如 Windows&#x2F;Mac，无法在不带图形界面的服务器上运行</td><td>支持的系统非常多，各类 windows 和 Linux 都支持</td></tr><tr><td>性能</td><td>性能损耗大，内存占用高，因为是把整个完整系统都虚拟出来了</td><td>性能好，只虚拟软件所需运行环境，最大化减少没用的配置</td></tr><tr><td>自动化</td><td>需要手动安装所有东西</td><td>一个命令就可以自动部署好所需环境</td></tr><tr><td>稳定性</td><td>稳定性不高，不同系统差异大</td><td>稳定性好，不同系统都一样部署方式</td></tr></tbody></table><h2 id="打包、分发、部署"><a href="#打包、分发、部署" class="headerlink" title="打包、分发、部署"></a>打包、分发、部署</h2><p><strong>打包</strong>：把软件运行所需的依赖、第三方库、软件打包到一起，变成一个安装包</p><p><strong>分发</strong>：将打包好的“安装包”上传镜像仓库，方便他人获取安装</p><p><strong>部署</strong>：拿着“安装包”就可以一个命令运行应用，自动模拟出一样的运行环境，不管是何种操作系统。</p><h2 id="Docker部署的优势"><a href="#Docker部署的优势" class="headerlink" title="Docker部署的优势"></a>Docker部署的优势</h2><p><strong>常规应用开发部署方式</strong>：自己在Windows上开发、测试—-&gt;到Linux服务器配置运行环境部署</p><blockquote><p>问题：我机器上跑都没问题，怎么到服务器就各种问题了</p></blockquote><p><strong>Docker部署</strong>：Windows开发、测试 —-&gt;打包为Docker镜像 —-&gt;各种服务器上只需要一个命令部署好</p><blockquote><p>优点：确保了不同机器上跑都是一致的运行环境，不会出现我机器上跑正常，你机器跑就有问题的情况。</p></blockquote><h2 id="Docker-通常用来做什么"><a href="#Docker-通常用来做什么" class="headerlink" title="Docker 通常用来做什么"></a>Docker 通常用来做什么</h2><ul><li>应用分发、部署，方便传播给他人安装。特别是开源软件和提供私有部署的应用</li><li>快速安装测试&#x2F;学习软件，用完就丢（类似小程序），不把时间浪费在安装软件上。例如 Redis &#x2F; MongoDB &#x2F; ElasticSearch &#x2F; ELK</li><li>多个版本软件共存，不污染系统，例如 Python2、Python3，Redis4.0，Redis5.0</li><li>Windows 上体验&#x2F;学习各种 Linux 系统</li></ul><h2 id="重要概念：镜像、容器"><a href="#重要概念：镜像、容器" class="headerlink" title="重要概念：镜像、容器"></a>重要概念：镜像、容器</h2><p><strong>镜像</strong>：可以理解为软件安装包，可以方便的进行传播和安装。<br><strong>容器</strong>：软件安装后的状态，每个软件运行环境都是独立的、隔离的，称之为容器。</p><h2 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h2><h3 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a><a href="https://docs.docker.com/get-docker/">Docker安装</a></h3><h3 id="镜像加速源"><a href="#镜像加速源" class="headerlink" title="镜像加速源"></a>镜像加速源</h3><table><thead><tr><th>镜像加速器</th><th>镜像加速器地址</th></tr></thead><tbody><tr><td>Docker 中国官方镜像</td><td><a href="https://registry.docker-cn.com/">https://registry.docker-cn.com</a></td></tr><tr><td>DaoCloud 镜像站</td><td><a href="http://f1361db2.m.daocloud.io/">http://f1361db2.m.daocloud.io</a></td></tr><tr><td>Azure 中国镜像</td><td><a href="https://dockerhub.azk8s.cn/">https://dockerhub.azk8s.cn</a></td></tr><tr><td>科大镜像站</td><td><a href="https://docker.mirrors.ustc.edu.cn/">https://docker.mirrors.ustc.edu.cn</a></td></tr><tr><td>阿里云</td><td>https:&#x2F;&#x2F;<your_code>.mirror.aliyuncs.com</td></tr><tr><td>七牛云</td><td><a href="https://reg-mirror.qiniu.com/">https://reg-mirror.qiniu.com</a></td></tr><tr><td>网易云</td><td><a href="https://hub-mirror.c.163.com/">https://hub-mirror.c.163.com</a></td></tr><tr><td>腾讯云</td><td><a href="https://mirror.ccs.tencentyun.com/">https://mirror.ccs.tencentyun.com</a></td></tr></tbody></table><h1 id="2-Docker快速安装软件"><a href="#2-Docker快速安装软件" class="headerlink" title="2.Docker快速安装软件"></a>2.Docker快速安装软件</h1><h2 id="直接安装的缺点"><a href="#直接安装的缺点" class="headerlink" title="直接安装的缺点"></a>直接安装的缺点</h2><ul><li>安装麻烦，可能有<strong>各种依赖</strong>，运行报错。例如：WordPress，ElasticSearch，Redis，ELK</li><li>可能对 <strong>Windows 并不友好</strong>，运行有各种<strong>兼容问题</strong>，软件只支持 Linux 上跑</li><li><strong>不方便安装多版本软件</strong>，不能共存。</li><li>电脑安装了一堆软件，拖慢电脑速度。</li><li>不同系统和硬件，安装方式不一样</li></ul><h2 id="Docker-安装的优点"><a href="#Docker-安装的优点" class="headerlink" title="Docker 安装的优点"></a>Docker 安装的优点</h2><ul><li><strong>一个命令</strong>就可以安装好，快速方便</li><li>有大量的<strong>镜像</strong>，可直接使用</li><li>没有<strong>系统兼容</strong>问题，Linux 专享软件也照样跑</li><li>支持软件<strong>多版本共存</strong></li><li>用完就丢，不拖慢电脑速度</li><li>不同系统和硬件，只要安装好 Docker 其他都一样了，一个命令搞定所有</li></ul><h2 id="Docker安装Redis"><a href="#Docker安装Redis" class="headerlink" title="Docker安装Redis"></a>Docker安装Redis</h2><p>Redis 官网：<a href="https://redis.io/">https://redis.io/</a></p><blockquote><p>官网下载安装教程只有源码安装方式，没有 Windows 版本。想要自己安装 windows 版本需要去找别人编译好的安装包。</p></blockquote><p>Docker官方镜像仓库查找Redis：<a href="https://hub.docker.com/">https://hub.docker.com/</a></p><p><img src="https://sjwx.easydoc.xyz/46901064/files/kv8zs4qr.png" alt="img"></p><p>一个命令跑起来：<code>docker run -d -p 6379:6379 --name redis redis:latest</code><br>命令参考：<a href="https://docs.docker.com/engine/reference/commandline/run/">https://docs.docker.com/engine/reference/commandline/run/</a></p><p><img src="https://raw.githubusercontent.com/Wishforpeace/Typora/main/pictureimage-20220715172116860.png" alt="image-20220715172116860"></p><h3 id="运行日志"><a href="#运行日志" class="headerlink" title="运行日志"></a>运行日志</h3><img src="https://raw.githubusercontent.com/Wishforpeace/Typora/main/picture/pictureimage-20220715172221689.png" style="zoom:80%;" /><h1 id="3-制作自己的镜像"><a href="#3-制作自己的镜像" class="headerlink" title="3.制作自己的镜像"></a>3.制作自己的镜像</h1><h3 id="为自己的-Web-项目构建镜像"><a href="#为自己的-Web-项目构建镜像" class="headerlink" title="为自己的 Web 项目构建镜像"></a>为自己的 Web 项目构建镜像</h3><p>示例项目代码：<a href="https://github.com/gzyunke/test-docker">https://github.com/gzyunke/test-docker</a><br>这是一个 Nodejs + Koa2 写的 Web 项目，提供了简单的两个演示页面。<br>软件依赖：<a href="https://nodejs.org/zh-cn/">nodejs</a><br>项目依赖库：koa、log4js、koa-router</p><blockquote><p>本文档课件配套 <a href="https://www.bilibili.com/video/BV11L411g7U1?p=3">视频教程</a></p></blockquote><h3 id="编写-Dockerfile"><a href="#编写-Dockerfile" class="headerlink" title="编写 Dockerfile"></a>编写 Dockerfile</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> node:<span class="hljs-number">11</span><br><span class="hljs-keyword">MAINTAINER</span> easydoc.net<br><br><span class="hljs-comment"># 复制代码</span><br><span class="hljs-keyword">ADD</span><span class="language-bash"> . /app</span><br><br><span class="hljs-comment"># 设置容器启动后的默认运行目录</span><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /app</span><br><br><span class="hljs-comment"># 运行命令，安装依赖</span><br><span class="hljs-comment"># RUN 命令可以有多个，但是可以用 &amp;&amp; 连接多个命令来减少层级。</span><br><span class="hljs-comment"># 例如 RUN npm install &amp;&amp; cd /app &amp;&amp; mkdir logs</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> npm install --registry=https://registry.npm.taobao.org</span><br><br><span class="hljs-comment"># CMD 指令只能一个，是容器启动后执行的命令，算是程序的入口。</span><br><span class="hljs-comment"># 如果还需要运行其他命令可以用 &amp;&amp; 连接，也可以写成一个shell脚本去执行。</span><br><span class="hljs-comment"># 例如 CMD cd /app &amp;&amp; ./start.sh</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> node app.js</span><br></code></pre></td></tr></table></figure><p><a href="https://docs.docker.com/engine/reference/builder/#run">Dockerfile文档</a></p><blockquote><p>实用技巧：<br>如果你写 Dockerfile 时经常遇到一些运行错误，依赖错误等，你可以直接运行一个依赖的底，然后进入终端进行配置环境，成功后再把做过的步骤命令写道 Dockerfile 文件中，这样编写调试会快很多。<br>例如上面的底是<code>node:11</code>，我们可以运行<code>docker run -it -d node:11 bash</code>，跑起来后进入容器终端配置依赖的软件，然后尝试跑起来自己的软件，最后把所有做过的步骤写入到 Dockerfile 就好了。<br>掌握好这个技巧，你的 Dockerfile 文件编写起来就非常的得心应手了。</p></blockquote><h3 id="Build-为镜像（安装包）和运行"><a href="#Build-为镜像（安装包）和运行" class="headerlink" title="Build 为镜像（安装包）和运行"></a>Build 为镜像（安装包）和运行</h3><p>编译 <code>docker build -t test:v1 .</code></p><blockquote><p><code>-t</code> 设置镜像名字和版本号<br>命令参考：<a href="https://docs.docker.com/engine/reference/commandline/build/">https://docs.docker.com/engine/reference/commandline/build/</a></p></blockquote><p>运行 <code>docker run -p 8080:8080 --name test-hello test:v1</code></p><blockquote><p><code>-p</code> 映射容器内端口到宿主机<br><code>--name</code> 容器名字<br><code>-d</code> 后台运行<br>命令参考文档：<a href="https://docs.docker.com/engine/reference/run/">https://docs.docker.com/engine/reference/run/</a></p></blockquote><h3 id="更多相关命令"><a href="#更多相关命令" class="headerlink" title="更多相关命令"></a>更多相关命令</h3><p><code>docker ps</code> 查看当前运行中的容器<br><code>docker images</code> 查看镜像列表<br><code>docker rm container-id</code> 删除指定 id 的容器<br><code>docker stop/start container-id</code> 停止&#x2F;启动指定 id 的容器<br><code>docker rmi image-id</code> 删除指定 id 的镜像<br><code>docker volume ls</code> 查看 volume 列表<br><code>docker network ls</code> 查看网络列表</p><h1 id="4-目录挂载"><a href="#4-目录挂载" class="headerlink" title="4.目录挂载"></a>4.目录挂载</h1><h2 id="现存问题"><a href="#现存问题" class="headerlink" title="现存问题"></a>现存问题</h2><ul><li>使用 Docker 运行后，我们改了项目代码不会立刻生效，需要重新<code>build</code>和<code>run</code>，很是麻烦。</li><li>容器里面产生的数据，例如 log 文件，数据库备份文件，容器删除后就丢失了。</li></ul><blockquote><p>目录挂载解决以上问题</p></blockquote><blockquote><p>本文档课件配套 <a href="https://www.bilibili.com/video/BV11L411g7U1?p=4">视频教程</a></p></blockquote><h2 id="几种挂载方式"><a href="#几种挂载方式" class="headerlink" title="几种挂载方式"></a>几种挂载方式</h2><ul><li><code>bind mount</code> 直接把宿主机目录映射到容器内，适合挂代码目录和配置文件。可挂到多个容器上</li><li><code>volume</code> 由容器创建和管理，创建在宿主机，所以删除容器不会丢失，官方推荐，更高效，Linux 文件系统，适合存储数据库数据。可挂到多个容器上</li><li><code>tmpfs mount</code> 适合存储临时文件，存宿主机内存中。不可多容器共享。</li></ul><p>文档参考：<a href="https://docs.docker.com/storage/">https://docs.docker.com/storage/</a></p><p><img src="https://sjwx.easydoc.xyz/46901064/files/kv96dc4q.png"></p><h2 id="挂载演示"><a href="#挂载演示" class="headerlink" title="挂载演示"></a>挂载演示</h2><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade">bind mount<span class="hljs-string">` 方式用绝对路径 `</span>-v D:<span class="hljs-regexp">/code:/</span>app<br>volume<span class="hljs-string">` 方式，只需要一个名字 `</span>-v db-data:/app<br></code></pre></td></tr></table></figure><p>示例：<br><code>docker run -p 8080:8080 --name test-hello -v D:/code:/app -d test:v1</code></p><blockquote><p>注意！<br>因为挂载后，容器里的代码就会替换为你本机的代码了，如果你代码目录没有<code>node_modules</code>目录，你需要在代码目录执行下<code>npm install --registry=https://registry.npm.taobao.org</code>确保依赖库都已经安装，否则可能会提示“Error: Cannot find module ‘koa’”<br>如果你的电脑没有安装 <a href="https://nodejs.org/en/">nodejs</a>，你需要安装一下才能执行上面的命令。</p></blockquote><h1 id="5-多容器通信"><a href="#5-多容器通信" class="headerlink" title="5.多容器通信"></a>5.多容器通信</h1><h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><p>项目往往都不是独立运行的，需要数据库、缓存这些东西配合运作。<br>这节我们把前面的 Web 项目增加一个 Redis 依赖，多跑一个 Redis 容器，演示如何多容器之间的通信。</p><h2 id="创建虚拟网络"><a href="#创建虚拟网络" class="headerlink" title="创建虚拟网络"></a>创建虚拟网络</h2><p>要想多容器之间互通，从 Web 容器访问 Redis 容器，我们只需要把他们放到同个网络中就可以了。</p><p>文档参考：<a href="https://docs.docker.com/engine/reference/commandline/network/">https://docs.docker.com/engine/reference/commandline/network/</a></p><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><h5 id="创建一个名为test-net的网络："><a href="#创建一个名为test-net的网络：" class="headerlink" title="创建一个名为test-net的网络："></a>创建一个名为<code>test-net</code>的网络：</h5><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">docker network create <span class="hljs-keyword">test</span>-<span class="hljs-keyword">net</span><br></code></pre></td></tr></table></figure><h5 id="运行-Redis-在-test-net-网络中，别名redis"><a href="#运行-Redis-在-test-net-网络中，别名redis" class="headerlink" title="运行 Redis 在 test-net 网络中，别名redis"></a>运行 Redis 在 <code>test-net</code> 网络中，别名<code>redis</code></h5><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">docker run</span> <span class="hljs-literal">-</span><span class="hljs-comment">d</span> <span class="hljs-literal">--</span><span class="hljs-comment">name redis</span> <span class="hljs-literal">--</span><span class="hljs-comment">network test</span><span class="hljs-literal">-</span><span class="hljs-comment">net</span> <span class="hljs-literal">--</span><span class="hljs-comment">network</span><span class="hljs-literal">-</span><span class="hljs-comment">alias redis redis:latest</span><br></code></pre></td></tr></table></figure><h5 id="修改代码中访问redis的地址为网络别名"><a href="#修改代码中访问redis的地址为网络别名" class="headerlink" title="修改代码中访问redis的地址为网络别名"></a>修改代码中访问<code>redis</code>的地址为网络别名</h5><p><img src="https://raw.githubusercontent.com/Wishforpeace/Typora/main/picture/kv98rfvb.png"></p><h5 id="运行-Web-项目，使用同个网络"><a href="#运行-Web-项目，使用同个网络" class="headerlink" title="运行 Web 项目，使用同个网络"></a>运行 Web 项目，使用同个网络</h5><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">docker <span class="hljs-keyword">run</span> -p 8080:8080 --name <span class="hljs-keyword">test</span> -v <span class="hljs-keyword">D</span>:/<span class="hljs-keyword">test</span>:/<span class="hljs-keyword">app</span> --network <span class="hljs-keyword">test</span>-<span class="hljs-keyword">net</span> -<span class="hljs-keyword">d</span> <span class="hljs-keyword">test</span>:v1<br></code></pre></td></tr></table></figure><h5 id="查看数据"><a href="#查看数据" class="headerlink" title="查看数据"></a>查看数据</h5><p><code>http://localhost:8080/redis</code><br>容器终端查看数据是否一致</p><h2 id="更多相关命令-1"><a href="#更多相关命令-1" class="headerlink" title="更多相关命令"></a>更多相关命令</h2><p><code>docker ps</code> 查看当前运行中的容器<br><code>docker images</code> 查看镜像列表<br><code>docker rm container-id</code> 删除指定 id 的容器<br><code>docker stop/start container-id</code> 停止&#x2F;启动指定 id 的容器<br><code>docker rmi image-id</code> 删除指定 id 的镜像<br><code>docker volume ls</code> 查看 volume 列表<br><code>docker network ls</code> 查看网络列表</p><h1 id="6-Docker-Compose"><a href="#6-Docker-Compose" class="headerlink" title="6.Docker-Compose"></a>6.Docker-Compose</h1><h2 id="现存问题-1"><a href="#现存问题-1" class="headerlink" title="现存问题"></a>现存问题</h2><p>在上节，我们运行了两个容器：Web 项目 + Redis<br>如果项目依赖更多的第三方软件，我们需要管理的容器就更加多，每个都要单独配置运行，指定网络。<br>这节，我们使用 docker-compose 把项目的多个服务集合到一起，一键运行。</p><h2 id="安装-Docker-Compose"><a href="#安装-Docker-Compose" class="headerlink" title="安装 Docker Compose"></a>安装 Docker Compose</h2><ul><li>如果你是安装的桌面版 Docker，不需要额外安装，已经包含了。</li><li>如果是没图形界面的服务器版 Docker，你需要单独安装 <a href="https://docs.docker.com/compose/install/#install-compose-on-linux-systems">安装文档</a></li><li>运行<code>docker-compose</code>检查是否安装成功</li></ul><h2 id="编写脚本"><a href="#编写脚本" class="headerlink" title="编写脚本"></a>编写脚本</h2><p>要把项目依赖的多个服务集合到一起，我们需要编写一个<code>docker-compose.yml</code>文件，描述依赖哪些服务<br>参考文档：<a href="https://docs.docker.com/compose/">https://docs.docker.com/compose/</a></p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">version</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;3.7&quot;</span><br><br><span class="hljs-attribute">services</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">app</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">build</span><span class="hljs-punctuation">:</span> <span class="hljs-string">./</span><br>    <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">80:8080</span><br>    <span class="hljs-attribute">volumes</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./:/app</span><br>    <span class="hljs-attribute">environment</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">TZ=Asia/Shanghai</span><br>  <span class="hljs-attribute">redis</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">redis:5.0.13</span><br>    <span class="hljs-attribute">volumes</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">redis:/data</span><br>    <span class="hljs-attribute">environment</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">TZ=Asia/Shanghai</span><br><br><span class="hljs-attribute">volumes</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">redis</span><span class="hljs-punctuation">:</span><br></code></pre></td></tr></table></figure><blockquote><p>容器默认时间不是北京时间，增加 TZ&#x3D;Asia&#x2F;Shanghai 可以改为北京时间</p></blockquote><h2 id="跑起来"><a href="#跑起来" class="headerlink" title="跑起来"></a>跑起来</h2><p>在<code>docker-compose.yml</code> 文件所在目录，执行：<code>docker-compose up</code>就可以跑起来了。<br>命令参考：<a href="https://docs.docker.com/compose/reference/up/">https://docs.docker.com/compose/reference/up/</a></p><p>在后台运行只需要加一个 -d 参数<code>docker-compose up -d</code><br>查看运行状态：<code>docker-compose ps</code><br>停止运行：<code>docker-compose stop</code><br>重启：<code>docker-compose restart</code><br>重启单个服务：<code>docker-compose restart service-name</code><br>进入容器命令行：<code>docker-compose exec service-name sh</code><br>查看容器运行log：<code>docker-compose logs [service-name]</code></p><h1 id="7-发布和部署"><a href="#7-发布和部署" class="headerlink" title="7.发布和部署"></a>7.发布和部署</h1><h2 id="镜像仓库介绍"><a href="#镜像仓库介绍" class="headerlink" title="镜像仓库介绍"></a>镜像仓库介绍</h2><p>镜像仓库用来存储我们 build 出来的“安装包”，Docker 官方提供了一个 <a href="https://hub.docker.com/">镜像库</a>，里面包含了大量镜像，基本各种软件所需依赖都有，要什么直接上去搜索。</p><p>我们也可以把自己 build 出来的镜像上传到 docker 提供的镜像库中，方便传播。<br>当然你也可以搭建自己的私有镜像库，或者使用国内各种大厂提供的镜像托管服务，例如：阿里云、腾讯云</p><blockquote><p>本文档课件配套 <a href="https://www.bilibili.com/video/BV11L411g7U1?p=7">视频教程</a></p></blockquote><h2 id="上传我们的镜像"><a href="#上传我们的镜像" class="headerlink" title="上传我们的镜像"></a>上传我们的镜像</h2><ul><li>首先你要先 <a href="https://hub.docker.com/">注册一个账号</a></li><li>创建一个镜像库<br><img src="https://sjwx.easydoc.xyz/46901064/files/kv9a2wty.png" alt="image.png"></li><li>命令行登录账号：<br><code>docker login -u username</code></li><li>新建一个tag，名字必须跟你注册账号一样<br><code>docker tag test:v1 username/test:v1</code></li><li>推上去<br><code>docker push username/test:v1</code></li><li>部署试下<br><code>docker run -dp 8080:8080 username/test:v1</code></li></ul><h5 id="docker-compose-中也可以直接用这个镜像了"><a href="#docker-compose-中也可以直接用这个镜像了" class="headerlink" title="docker-compose 中也可以直接用这个镜像了"></a>docker-compose 中也可以直接用这个镜像了</h5><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">version</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;3.7&quot;</span><br><br><span class="hljs-attribute">services</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">app</span><span class="hljs-punctuation">:</span><br><span class="hljs-comment">#    build: ./</span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">helloguguji/test:v1</span><br>    <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">80:8080</span><br>    <span class="hljs-attribute">volumes</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./:/app</span><br>    <span class="hljs-attribute">environment</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">TZ=Asia/Shanghai</span><br>  <span class="hljs-attribute">redis</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">redis:5.0.13</span><br>    <span class="hljs-attribute">volumes</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">redis:/data</span><br>    <span class="hljs-attribute">environment</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">TZ=Asia/Shanghai</span><br><br><span class="hljs-attribute">volumes</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">redis</span><span class="hljs-punctuation">:</span><br></code></pre></td></tr></table></figure><h2 id="阿里云容器托管"><a href="#阿里云容器托管" class="headerlink" title="阿里云容器托管"></a>阿里云容器托管</h2><p>docker 官方的镜像托管有时候上传和下载都太慢了，如果你想要更快的速度，可以使用阿里云的免费镜像托管<br>登录 <a href="https://www.aliyun.com/">阿里云</a></p><p><img src="https://sjwx.easydoc.xyz/46901064/files/kv9dqxuo.png" alt="image.png"></p><h1 id="8-备份和迁移数据"><a href="#8-备份和迁移数据" class="headerlink" title="8.备份和迁移数据"></a>8.备份和迁移数据</h1><h2 id="迁移方式介绍"><a href="#迁移方式介绍" class="headerlink" title="迁移方式介绍"></a>迁移方式介绍</h2><p>容器中的数据，如果没有用挂载目录，删除容器后就会丢失数据。</p><p>如果你是用<code>bind mount</code>直接把宿主机的目录挂进去容器，那迁移数据很方便，直接复制目录就好了<br>如果你是用<code>volume</code>方式挂载的，由于数据是由容器创建和管理的，需要用特殊的方式把数据弄出来。</p><h2 id="备份和导入-Volume-的流程"><a href="#备份和导入-Volume-的流程" class="headerlink" title="备份和导入 Volume 的流程"></a>备份和导入 Volume 的流程</h2><p>备份：</p><ul><li>运行一个 ubuntu 的容器，挂载需要备份的 volume 到容器，并且挂载宿主机目录到容器里的备份目录。</li><li>运行 tar 命令把数据压缩为一个文件</li><li>把备份文件复制到需要导入的机器</li></ul><p>导入：</p><ul><li>运行 ubuntu 容器，挂载容器的 volume，并且挂载宿主机备份文件所在目录到容器里</li><li>运行 tar 命令解压备份文件到指定目录</li></ul><h2 id="备份-MongoDB-数据演示"><a href="#备份-MongoDB-数据演示" class="headerlink" title="备份 MongoDB 数据演示"></a>备份 MongoDB 数据演示</h2><ul><li>运行一个 mongodb，创建一个名叫<code>mongo-data</code>的 volume 指向容器的 &#x2F;data 目录<br><code>docker run -p 27018:27017 --name mongo -v mongo-data:/data -d mongo:4.4</code></li><li>运行一个 Ubuntu 的容器，挂载<code>mongo</code>容器的所有 volume，映射宿主机的 backup 目录到容器里面的 &#x2F;backup 目录，然后运行 tar 命令把数据压缩打包<br><code>docker run --rm --volumes-from mongo -v d:/backup:/backup ubuntu tar cvf /backup/backup.tar /data/</code></li></ul><p>最后你就可以拿着这个 backup.tar 文件去其他地方导入了。</p><h2 id="恢复-Volume-数据演示"><a href="#恢复-Volume-数据演示" class="headerlink" title="恢复 Volume 数据演示"></a>恢复 Volume 数据演示</h2><ul><li>运行一个 ubuntu 容器，挂载 mongo 容器的所有 volumes，然后读取 &#x2F;backup 目录中的备份文件，解压到 &#x2F;data&#x2F; 目录<br><code>docker run --rm --volumes-from mongo -v d:/backup:/backup ubuntu bash -c &quot;cd /data/ &amp;&amp; tar xvf /backup/backup.tar --strip 1&quot;</code></li></ul><blockquote><p>注意，volumes-from 指定的是容器名字<br>strip 1 表示解压时去掉前面1层目录，因为压缩时包含了绝对路径</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>K8S极速入门</title>
    <link href="/2022/07/13/K8S%E6%9E%81%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    <url>/2022/07/13/K8S%E6%9E%81%E9%80%9F%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Go Redis</title>
    <link href="/2022/07/10/Go-Redis/"/>
    <url>/2022/07/10/Go-Redis/</url>
    
    <content type="html"><![CDATA[<h1 id="1-快速入门"><a href="#1-快速入门" class="headerlink" title="1.快速入门"></a>1.快速入门</h1><h2 id="1-安装依赖包"><a href="#1-安装依赖包" class="headerlink" title="1.安装依赖包"></a>1.安装依赖包</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">go</span> <span class="hljs-built_in">get</span> -<span class="hljs-keyword">u</span> github.<span class="hljs-keyword">com</span>/<span class="hljs-keyword">go</span>-redis/redis<br></code></pre></td></tr></table></figure><h2 id="2-golang连接redis"><a href="#2-golang连接redis" class="headerlink" title="2.golang连接redis"></a>2.golang连接redis</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 根据redis配置初始化一个客户端</span><br>client := redis.NewClient(&amp;redis.Options&#123;<br>Addr:     <span class="hljs-string">&quot;localhost:6379&quot;</span>, <span class="hljs-comment">// redis地址</span><br>Password: <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-comment">// redis密码，没有则留空</span><br>DB:       <span class="hljs-number">0</span>,  <span class="hljs-comment">// 默认数据库，默认是0</span><br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="3-简单的例子"><a href="#3-简单的例子" class="headerlink" title="3.简单的例子"></a>3.简单的例子</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 设置一个key，过期时间为0，意思就是永远不过期</span><br>err := client.Set(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;value&quot;</span>, <span class="hljs-number">0</span>).Err()<br><br><span class="hljs-comment">// 检测设置是否成功</span><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br><br><span class="hljs-comment">// 根据key查询缓存，通过Result函数返回两个值</span><br><span class="hljs-comment">//  第一个代表key的值，第二个代表查询错误信息</span><br>val, err := client.Get(<span class="hljs-string">&quot;key&quot;</span>).Result()<br><br><span class="hljs-comment">// 检测，查询是否出错</span><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;key&quot;</span>, val)<br></code></pre></td></tr></table></figure><h2 id="2-连接设置"><a href="#2-连接设置" class="headerlink" title="2.连接设置"></a>2.连接设置</h2><h2 id="1-golang连接redis"><a href="#1-golang连接redis" class="headerlink" title="1.golang连接redis"></a>1.golang连接redis</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 初始化一个新的redis client</span><br>client := redis.NewClient(&amp;redis.Options&#123;<br>Addr:     <span class="hljs-string">&quot;localhost:6379&quot;</span>, <span class="hljs-comment">// redis地址</span><br>Password: <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-comment">// redis没密码，没有设置，则留空</span><br>DB:       <span class="hljs-number">0</span>,  <span class="hljs-comment">// 使用默认数据库</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>通过例子，我们知道主要通过Options配置redis的连接参数，下面对Options参数进行详细说明。</p><blockquote><p>提示：go-redis包自带了连接池，会自动维护redis连接，因此创建一次client即可，不要查询一次redis就关闭client。</p></blockquote><h1 id="2-Options参数详解"><a href="#2-Options参数详解" class="headerlink" title="2.Options参数详解"></a>2.Options参数详解</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Options <span class="hljs-keyword">struct</span> &#123;<br><span class="hljs-comment">// 网络类型 tcp 或者 unix.</span><br><span class="hljs-comment">// 默认是 tcp.</span><br>Network <span class="hljs-type">string</span><br><span class="hljs-comment">// redis地址，格式 host:port</span><br>Addr <span class="hljs-type">string</span><br><br><span class="hljs-comment">// 新建一个redis连接的时候，会回调这个函数</span><br>OnConnect <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(*Conn)</span></span> <span class="hljs-type">error</span><br><br><span class="hljs-comment">// redis密码，redis server没有设置可以为空。</span><br>Password <span class="hljs-type">string</span><br><br><span class="hljs-comment">// redis数据库，序号从0开始，默认是0，可以不用设置</span><br>DB <span class="hljs-type">int</span><br><br><span class="hljs-comment">// redis操作失败最大重试次数，默认不重试。</span><br>MaxRetries <span class="hljs-type">int</span><br><br><span class="hljs-comment">// 最小重试时间间隔.</span><br><span class="hljs-comment">// 默认是 8ms ; -1 表示关闭.</span><br>MinRetryBackoff time.Duration<br><br><span class="hljs-comment">// 最大重试时间间隔</span><br><span class="hljs-comment">// 默认是 512ms; -1 表示关闭.</span><br>MaxRetryBackoff time.Duration<br><br><span class="hljs-comment">// redis连接超时时间.</span><br><span class="hljs-comment">// 默认是 5 秒.</span><br>DialTimeout time.Duration<br><br><span class="hljs-comment">// socket读取超时时间</span><br><span class="hljs-comment">// 默认 3 秒.</span><br>ReadTimeout time.Duration<br><br><span class="hljs-comment">// socket写超时时间</span><br>WriteTimeout time.Duration<br><br><span class="hljs-comment">// redis连接池的最大连接数.</span><br><span class="hljs-comment">// 默认连接池大小等于 cpu个数 * 10</span><br>PoolSize <span class="hljs-type">int</span><br><br><span class="hljs-comment">// redis连接池最小空闲连接数.</span><br>MinIdleConns <span class="hljs-type">int</span><br><span class="hljs-comment">// redis连接最大的存活时间，默认不会关闭过时的连接.</span><br>MaxConnAge time.Duration<br><br><span class="hljs-comment">// 当你从redis连接池获取一个连接之后，连接池最多等待这个拿出去的连接多长时间。</span><br><span class="hljs-comment">// 默认是等待 ReadTimeout + 1 秒.</span><br>PoolTimeout time.Duration<br><span class="hljs-comment">// redis连接池多久会关闭一个空闲连接.</span><br><span class="hljs-comment">// 默认是 5 分钟. -1 则表示关闭这个配置项</span><br>IdleTimeout time.Duration<br><span class="hljs-comment">// 多长时间检测一下，空闲连接</span><br><span class="hljs-comment">// 默认是 1 分钟. -1 表示关闭空闲连接检测</span><br>IdleCheckFrequency time.Duration<br><br><span class="hljs-comment">// 只读设置，如果设置为true， redis只能查询缓存不能更新。</span><br>readOnly <span class="hljs-type">bool</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3-基本键值操作"><a href="#3-基本键值操作" class="headerlink" title="3.基本键值操作"></a>3.基本键值操作</h1><p>redis基本的key&#x2F;value操作，指的是针对value值的类型为字符串或者数字类型的读写操作。</p><p>golang redis常用函数列表：</p><ul><li>Set - 设置一个key的值</li><li>Get - 查询key的值</li><li>GetSet - 设置一个key的值，并返回这个key的旧值</li><li>SetNX - 如果key不存在，则设置这个key的值</li><li>MGet - 批量查询key的值</li><li>MSet - 批量设置key的值</li><li>Incr,IncrBy,IncrByFloat - 针对一个key的数值进行递增操作</li><li>Decr,DecrBy - 针对一个key的数值进行递减操作</li><li>Del - 删除key操作，可以批量删除</li><li>Expire - 设置key的过期时间</li></ul><h2 id="1-Set"><a href="#1-Set" class="headerlink" title="1.Set"></a>1.<code>Set</code></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 第三个参数为过期时间，0为永不过期</span><br>err := client.Set(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>,<span class="hljs-number">0</span>).Err()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span>&#123;<br>  <span class="hljs-built_in">panic</span>(err)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-Get"><a href="#2-Get" class="headerlink" title="2.Get"></a>2.<code>Get</code></h2><p>查询key的值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Result函数返回两个值，第一个是key的值，第二个是错误信息</span><br>val, err := client.Get(<span class="hljs-string">&quot;key&quot;</span>).Result()<br><span class="hljs-comment">// 判断查询是否出错</span><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;key&quot;</span>, val)<br></code></pre></td></tr></table></figure><h2 id="3-GetSet"><a href="#3-GetSet" class="headerlink" title="3.GetSet"></a>3.<code>GetSet</code></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Result函数返回两个值，第一个是key的值，第二个是错误信息</span><br>oldVal, err := client.GetSet(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;new value&quot;</span>).Result()<br><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br><span class="hljs-comment">// 打印key的旧值</span><br>fmt.Println(<span class="hljs-string">&quot;key&quot;</span>, oldVal)<br></code></pre></td></tr></table></figure><h2 id="4-SetNX"><a href="#4-SetNX" class="headerlink" title="4.SetNX"></a>4.<code>SetNX</code></h2><p>如果key不存在，则设置这个key的值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 第三个参数代表key的过期时间，0代表不会过期。</span><br>err := client.SetNX(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;value&quot;</span>, <span class="hljs-number">0</span>).Err()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-MGet"><a href="#5-MGet" class="headerlink" title="5.MGet"></a>5.<code>MGet</code></h2><p>批量查询key的值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// MGet函数可以传入任意个key，一次性返回多个值。</span><br><span class="hljs-comment">// 这里Result返回两个值，第一个值是一个数组，第二个值是错误信息</span><br>vals, err := client.MGet(<span class="hljs-string">&quot;key1&quot;</span>, <span class="hljs-string">&quot;key2&quot;</span>, <span class="hljs-string">&quot;key3&quot;</span>).Result()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br>fmt.Println(vals)<br></code></pre></td></tr></table></figure><h2 id="6-MSet"><a href="#6-MSet" class="headerlink" title="6.MSet"></a>6.<code>MSet</code></h2><p>批量设置key的值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">err := client.MSet(<span class="hljs-string">&quot;key1&quot;</span>, <span class="hljs-string">&quot;value1&quot;</span>, <span class="hljs-string">&quot;key2&quot;</span>, <span class="hljs-string">&quot;value2&quot;</span>, <span class="hljs-string">&quot;key3&quot;</span>, <span class="hljs-string">&quot;value3&quot;</span>).Err()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>  <span class="hljs-built_in">panic</span>(err)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-Incr-、IncrBy、IncrByFloat"><a href="#7-Incr-、IncrBy、IncrByFloat" class="headerlink" title="7.Incr 、IncrBy、IncrByFloat"></a>7.<code>Incr</code> 、<code>IncrBy</code>、<code>IncrByFloat</code></h2><p>针对一个key的值进行递增操作</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Incr函数每次加一</span><br>val, err := client.Incr(<span class="hljs-string">&quot;key&quot;</span>).Result()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;最新值&quot;</span>, val)<br><br><span class="hljs-comment">// IncrBy函数，可以指定每次递增多少</span><br>val, err := client.IncrBy(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-number">2</span>).Result()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;最新值&quot;</span>, val)<br><br><span class="hljs-comment">// IncrByFloat函数，可以指定每次递增多少，跟IncrBy的区别是累加的是浮点数</span><br>val, err := client.IncrByFloat(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-number">2</span>).Result()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;最新值&quot;</span>, val)<br><br></code></pre></td></tr></table></figure><h2 id="8-Decr、DecrBy"><a href="#8-Decr、DecrBy" class="headerlink" title="8.Decr、DecrBy"></a>8.<code>Decr</code>、<code>DecrBy</code></h2><p>针对一个key的值进行递减操作</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Decr函数每次减一</span><br>val, err := client.Decr(<span class="hljs-string">&quot;key&quot;</span>).Result()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;最新值&quot;</span>, val)<br><br><span class="hljs-comment">// DecrBy函数，可以指定每次递减多少</span><br>val, err := client.DecrBy(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-number">2</span>).Result()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;最新值&quot;</span>, val)<br></code></pre></td></tr></table></figure><h2 id="9-Del"><a href="#9-Del" class="headerlink" title="9.Del"></a>9.<code>Del</code></h2><p>删除key操作，支持批量删除</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go">/ 删除key<br>client.Del(<span class="hljs-string">&quot;key&quot;</span>)<br><br><span class="hljs-comment">// 删除多个key, Del函数支持删除多个key</span><br>err := client.Del(<span class="hljs-string">&quot;key1&quot;</span>, <span class="hljs-string">&quot;key2&quot;</span>, <span class="hljs-string">&quot;key3&quot;</span>).Err()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="10-Expire"><a href="#10-Expire" class="headerlink" title="10.Expire"></a>10.<code>Expire</code></h2><p>设置key的过期时间，单位为<strong>秒</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">client.Expire(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><h1 id="4-hash用法"><a href="#4-hash用法" class="headerlink" title="4.hash用法"></a>4.hash用法</h1><p>golang redis hash类型数据操作。</p><p>如果你希望key&#x2F;value的值也能作为hash结构进行操作，可以选择redis hash类型。</p><p>使用场景举例：<br>如果我们希望缓存一条用户信息(包括用户id、用户名、email字段)，希望能够做到局部读写用户信息（例如：读写用户名），也能够读取整条用户信息，那么hash类型就支持这些操作。</p><p>redis hash操作主要有2-3个元素组成：</p><ul><li>key - redis key 唯一标识</li><li>field - hash数据的字段名</li><li>value - 值，有些操作不需要值</li></ul><p><strong>go redis hash数据常用函数：</strong></p><ul><li>HSet - 根据key和field字段设置，field字段的值</li><li>HGet - 根据key和field字段，查询field字段的值</li><li>HGetAll - 根据key查询所有字段和值</li><li>HIncrBy - 根据key和field字段，累加数值。</li><li>HKeys - 根据key返回所有字段名</li><li>HLen - 根据key，查询hash的字段数量</li><li>HMGet - 根据key和多个字段名，批量查询多个hash字段值</li><li>HMSet - 根据key和多个字段名和字段值，批量设置hash字段值</li><li>HSetNX - 如果field字段不存在，则设置hash字段值</li><li>HDel - 根据key和字段名，删除hash字段，支持批量删除hash字段</li><li>HExists - 检测hash字段名是否存在。</li></ul><blockquote><p>提示：不管我们选择redis什么类型的数据，操作的时候都必须要有一个&#x3D;&#x3D;唯一的Key, 用来唯一标识一个数据。&#x3D;&#x3D;</p></blockquote><h2 id="1-HSet"><a href="#1-HSet" class="headerlink" title="1.HSet"></a>1.<code>HSet</code></h2><p>根据key和field字段设置，field字段的值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// user_1 是hash key，username 是字段名, tizi365是字段值</span><br>err := client.HSet(<span class="hljs-string">&quot;user_1&quot;</span>, <span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;tizi365&quot;</span>).Err()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-HGet"><a href="#2-HGet" class="headerlink" title="2.HGet"></a>2.<code>HGet</code></h2><p>根据<code>key</code>和<code>field</code>字段，查询<code>field</code>字段的值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// user_1 是hash key，username是字段名</span><br>username, err := client.HGet(<span class="hljs-string">&quot;user_1&quot;</span>, <span class="hljs-string">&quot;username&quot;</span>).Result()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br>fmt.Println(username)<br></code></pre></td></tr></table></figure><h2 id="3-HGetAll"><a href="#3-HGetAll" class="headerlink" title="3.HGetAll"></a>3.<code>HGetAll</code></h2><p>根据<code>key</code>查询所有字段和值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 一次性返回key=user_1的所有hash字段和值</span><br>data, err := client.HGetAll(<span class="hljs-string">&quot;user_1&quot;</span>).Result()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br><br><span class="hljs-comment">// data是一个map类型，这里使用使用循环迭代输出</span><br><span class="hljs-keyword">for</span> field, val := <span class="hljs-keyword">range</span> data &#123;<br>fmt.Println(field,val)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-HIncrBy"><a href="#4-HIncrBy" class="headerlink" title="4.HIncrBy"></a>4.<code>HIncrBy</code></h2><p>根据key和field字段，累加字段的数值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 累加count字段的值，一次性累加2， user_1为hash key</span><br>count, err := client.HIncrBy(<span class="hljs-string">&quot;user_1&quot;</span>, <span class="hljs-string">&quot;count&quot;</span>, <span class="hljs-number">2</span>).Result()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br><br>fmt.Println(count)<br></code></pre></td></tr></table></figure><h2 id="5-HKeys"><a href="#5-HKeys" class="headerlink" title="5.HKeys"></a>5.<code>HKeys</code></h2><p>根据<code>Key</code>返回所有字段名</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// keys是一个string数组</span><br>keys, err := client.HKeys(<span class="hljs-string">&quot;user_1&quot;</span>).Result()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br><br>fmt.Println(keys)<br></code></pre></td></tr></table></figure><h2 id="6-HLen"><a href="#6-HLen" class="headerlink" title="6.HLen"></a>6.<code>HLen</code></h2><p>根据key，查询hash的字段数量</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go">size, err := client.HLen(<span class="hljs-string">&quot;key&quot;</span>).Result()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br><br>fmt.Println(size)<br></code></pre></td></tr></table></figure><h2 id="7-HMGet"><a href="#7-HMGet" class="headerlink" title="7.HMGet"></a>7.<code>HMGet</code></h2><p>根据key和多个字段名，批量查询多个hash字段值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go">size, err := client.HLen(<span class="hljs-string">&quot;key&quot;</span>).Result()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br><br>fmt.Println(size)<br></code></pre></td></tr></table></figure><h2 id="8-HMSet"><a href="#8-HMSet" class="headerlink" title="8.HMSet"></a>8.<code>HMSet</code></h2><p>根据key和多个字段名和字段值，批量设置hash字段值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 初始化hash数据的多个字段值</span><br>data := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;)<br>data[<span class="hljs-string">&quot;id&quot;</span>] = <span class="hljs-number">1</span><br>data[<span class="hljs-string">&quot;username&quot;</span>] = <span class="hljs-string">&quot;tizi&quot;</span><br><br><span class="hljs-comment">// 一次性保存多个hash字段值</span><br>err := client.HMSet(<span class="hljs-string">&quot;key&quot;</span>, data).Err()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9-HSetNX"><a href="#9-HSetNX" class="headerlink" title="9.HSetNX"></a>9.<code>HSetNX</code></h2><p>如果hash不存在，则设置hash字段值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">err := client.HSetNX(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-number">100</span>).Err()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="10-HDel"><a href="#10-HDel" class="headerlink" title="10.HDel"></a>10.<code>HDel</code></h2><p>根据key和字段名，删除hash字段，支持批量删除hash字段</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 删除一个字段id</span><br>client.HDel(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;id&quot;</span>)<br><br><span class="hljs-comment">// 删除多个字段</span><br>client.HDel(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;username&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="11-HExists"><a href="#11-HExists" class="headerlink" title="11.HExists"></a>11.<code>HExists</code></h2><p>检查hash字段名是否存在</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 检测id字段是否存在</span><br>err := client.HExists(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;id&quot;</span>).Err()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="5-List用法"><a href="#5-List用法" class="headerlink" title="5.List用法"></a>5.List用法</h1><p>Redis列表是简单的字符串列表，列表是有序的，列表中的元素可以重复。</p><p>可以添加一个元素到列表的头部（左边）或者尾部（右边）</p><p><strong>golang redis list数据操作常用函数：</strong></p><ul><li>LPush - 从列表左边插入数据</li><li>LPushX - 跟LPush的区别是，仅当列表存在的时候才插入数据</li><li>RPop - 从列表的右边删除第一个数据，并返回删除的数据</li><li>RPush - 从列表右边插入数据</li><li>RPushX - 跟RPush的区别是，仅当列表存在的时候才插入数据</li><li>LPop - 从列表左边删除第一个数据，并返回删除的数据</li><li>LLen - 返回列表的大小</li><li>LRange - 返回列表的一个范围内的数据，也可以返回全部数据</li><li>LRem - 删除列表中的数据</li><li>LIndex - 根据索引坐标，查询列表中的数据</li><li>LInsert - 在指定位置插入数据</li></ul><h2 id="1-LPush"><a href="#1-LPush" class="headerlink" title="1.LPush"></a>1.<code>LPush</code></h2><p>从列表左边插入数据</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 插入一个数据</span><br>client.LPush(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;data1&quot;</span>)<br><br><span class="hljs-comment">// LPush支持一次插入任意个数据</span><br>err := client.LPush(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>).Err()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-LPushX"><a href="#2-LPushX" class="headerlink" title="2.LPushX"></a>2.<code>LPushX</code></h2><p>跟LPush的区别是，仅当列表存在的时候才插入数据,用法完全一样。</p><h2 id="3-RPop"><a href="#3-RPop" class="headerlink" title="3.RPop"></a>3.<code>RPop</code></h2><p>从列表的右边删除第一个数据，并返回删除的数据</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go">val, err := client.RPop(<span class="hljs-string">&quot;key&quot;</span>).Result()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br><br>fmt.Println(val)<br></code></pre></td></tr></table></figure><h2 id="4-RPush"><a href="#4-RPush" class="headerlink" title="4.RPush"></a>4.<code>RPush</code></h2><p>从列表右边插入数据</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 插入一个数据</span><br>client.RPush(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;data1&quot;</span>)<br><br><span class="hljs-comment">// 支持一次插入任意个数据</span><br>err := client.RPush(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>).Err()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-RPushX"><a href="#5-RPushX" class="headerlink" title="5.RPushX"></a>5.<code>RPushX</code></h2><p>跟RPush的区别是，仅当列表存在的时候才插入数据, 他们用法一样</p><h2 id="6-LPop"><a href="#6-LPop" class="headerlink" title="6.LPop"></a>6.<code>LPop</code></h2><p>从列表左边删除第一个数据，并返回删除的数据</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go">val, err := client.LPop(<span class="hljs-string">&quot;key&quot;</span>).Result()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br><br>fmt.Println(val)<br></code></pre></td></tr></table></figure><h2 id="7-LLen"><a href="#7-LLen" class="headerlink" title="7.LLen"></a>7.<code>LLen</code></h2><p>返回列表的大小</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go">val, err := client.LLen(<span class="hljs-string">&quot;key&quot;</span>).Result()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br><br>fmt.Println(val)<br></code></pre></td></tr></table></figure><h2 id="8-LRange"><a href="#8-LRange" class="headerlink" title="8.LRange"></a>8.<code>LRange</code></h2><p>返回列表的一个范围内的数据，也可以返回全部数据</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 返回从0开始到-1位置之间的数据，意思就是返回全部数据</span><br>vals, err := client.LRange(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>).Result()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br>fmt.Println(vals)<br></code></pre></td></tr></table></figure><h2 id="9-LRem"><a href="#9-LRem" class="headerlink" title="9.LRem"></a>9.<code>LRem</code></h2><p>删除列表中的数据</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 从列表左边开始，删除100， 如果出现重复元素，仅删除1次，也就是删除第一个</span><br>dels, err := client.LRem(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-number">100</span>).Result()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br><br><span class="hljs-comment">// 如果存在多个100，则从列表左边开始删除2个100</span><br>client.LRem(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-number">2</span>,<span class="hljs-number">100</span>)<br><br><br><span class="hljs-comment">// 如果存在多个100，则从列表右边开始删除2个100</span><br><span class="hljs-comment">// 第二个参数负数表示从右边开始删除几个等于100的元素</span><br>client.LRem(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-number">-2</span>,<span class="hljs-number">100</span>)<br><br><span class="hljs-comment">// 如果存在多个100，第二个参数为0，表示删除所有元素等于100的数据</span><br>client.LRem(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-number">0</span>,<span class="hljs-number">100</span>)<br></code></pre></td></tr></table></figure><h2 id="10-LIndex"><a href="#10-LIndex" class="headerlink" title="10.LIndex"></a>10.<code>LIndex</code></h2><p>根据索引坐标，查询列表中的数据</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 列表索引从0开始计算，这里返回第6个元素</span><br>val, err := client.LIndex(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-number">5</span>).Result()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br><br>fmt.Println(val)<br></code></pre></td></tr></table></figure><h2 id="11-LInsert"><a href="#11-LInsert" class="headerlink" title="11.LInsert"></a>11.<code>LInsert</code></h2><p>在指定位置插入数据</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 在列表中5的前面插入4</span><br><span class="hljs-comment">// before是之前的意思</span><br>err := client.LInsert(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;before&quot;</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>).Err()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br><br><span class="hljs-comment">// 在列表中 tizi365 元素的前面插入 欢迎你</span><br>client.LInsert(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;before&quot;</span>, <span class="hljs-string">&quot;tizi365&quot;</span>, <span class="hljs-string">&quot;欢迎你&quot;</span>)<br><br><span class="hljs-comment">// 在列表中 tizi365 元素的后面插入 2019</span><br>client.LInsert(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;after&quot;</span>, <span class="hljs-string">&quot;tizi365&quot;</span>, <span class="hljs-string">&quot;2019&quot;</span>)<br></code></pre></td></tr></table></figure><h1 id="6-集合"><a href="#6-集合" class="headerlink" title="6.集合"></a>6.集合</h1><p>redis的set类型（集合）是string类型数值的无序集合，并且集合元素唯一。</p><p>下面介绍go redis的集合用法。</p><p><strong>go redis 集合（set）常用函数列表</strong>：</p><ul><li>SAdd - 添加集合元素</li><li>SCard - 获取集合元素个数</li><li>SIsMember - 判断元素是否在集合中</li><li>SMembers - 获取集合中所有的元素</li><li>SRem - 删除集合元素</li><li>SPop,SPopN - 随机返回集合中的元素，并且删除返回的元素</li></ul><h2 id="1-SAdd"><a href="#1-SAdd" class="headerlink" title="1.SAdd"></a>1.<code>SAdd</code></h2><p>添加集合元素</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 添加100到集合中</span><br>err := client.SAdd(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-number">100</span>).Err()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br><br><span class="hljs-comment">// 将100,200,300添加到集合中</span><br>client.SAdd(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">300</span>)<br></code></pre></td></tr></table></figure><h2 id="2-SCard"><a href="#2-SCard" class="headerlink" title="2.SCard"></a>2.<code>SCard</code></h2><p>获取集合元素个数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go">size, err := client.SCard(<span class="hljs-string">&quot;key&quot;</span>).Result()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br>fmt.Println(size)<br></code></pre></td></tr></table></figure><h2 id="3-SIsMember"><a href="#3-SIsMember" class="headerlink" title="3.SIsMember"></a>3.<code>SIsMember</code></h2><p>判断元素是否在集合中</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 检测100是否包含在集合中</span><br>ok, _ := client.SIsMember(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-number">100</span>).Result()<br><span class="hljs-keyword">if</span> ok &#123;<br>fmt.Println(<span class="hljs-string">&quot;集合包含指定元素&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-SMembers"><a href="#4-SMembers" class="headerlink" title="4.SMembers"></a>4.<code>SMembers</code></h2><p>获取集合中所有的元素</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">es, _ := client.SMembers(<span class="hljs-string">&quot;key&quot;</span>).Result()<br><span class="hljs-comment">// 返回的es是string数组</span><br>fmt.Println(es)<br></code></pre></td></tr></table></figure><h2 id="5-SRem"><a href="#5-SRem" class="headerlink" title="5.SRem"></a>5.<code>SRem</code></h2><p>删除集合元素</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 删除集合中的元素100</span><br>client.SRem(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-number">100</span>)<br><br><span class="hljs-comment">// 删除集合中的元素tizi和2019</span><br>client.SRem(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;tizi&quot;</span>, <span class="hljs-string">&quot;2019&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="6-SPop-SPopN"><a href="#6-SPop-SPopN" class="headerlink" title="6.SPop,SPopN"></a>6.<code>SPop,SPopN</code></h2><p>随机返回集合中的元素，并且删除返回的元素</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 随机返回集合中的一个元素，并且删除这个元素</span><br>val, _ := client.SPop(<span class="hljs-string">&quot;key&quot;</span>).Result()<br>fmt.Println(val)<br><br><span class="hljs-comment">// 随机返回集合中的5个元素，并且删除这些元素</span><br>vals, _ := client.SPopN(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-number">5</span>).Result()<br>fmt.Println(vals)<br></code></pre></td></tr></table></figure><h1 id="7-有序集合"><a href="#7-有序集合" class="headerlink" title="7.有序集合"></a>7.有序集合</h1><p>Redis 有序集合（sorted set）和集合一样也是string类型元素的集合,且不允许重复的成员，不同的是每个元素都会关联一个double类型的分数，这个分数主要用于集合元素排序。</p><p>下面介绍golang redis 有序集合的用法</p><p><strong>go redis有序集合常用函数:</strong></p><ul><li>ZAdd - 添加一个或者多个元素到集合，如果元素已经存在则更新分数</li><li>ZCard - 返回集合元素个数</li><li>ZCount - 统计某个分数范围内的元素个数</li><li>ZIncrBy - 增加元素的分数</li><li>ZRange,ZRevRange - 返回集合中某个索引范围的元素，根据分数从小到大排序</li><li>ZRangeByScore,ZRevRangeByScore - 根据分数范围返回集合元素，元素根据分数从小到大排序，支持分页。</li><li>ZRem - 删除集合元素</li><li>ZRemRangeByRank - 根据索引范围删除元素</li><li>ZRemRangeByScore - 根据分数范围删除元素</li><li>ZScore - 查询元素对应的分数</li><li>ZRank, ZRevRank - 查询元素的排名</li></ul><h2 id="1-ZAdd"><a href="#1-ZAdd" class="headerlink" title="1.ZAdd"></a>1.<code>ZAdd</code></h2><p>添加一个或者多个元素到集合，如果元素已经存在则更新分数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 添加一个集合元素到集合中， 这个元素的分数是2.5，元素名是tizi</span><br>err := client.ZAdd(<span class="hljs-string">&quot;key&quot;</span>, redis.Z&#123;<span class="hljs-number">2.5</span>,<span class="hljs-string">&quot;tizi&quot;</span>&#125;).Err()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br></code></pre></td></tr></table></figure><p>下面是redis.Z结构体说明：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Z <span class="hljs-keyword">struct</span> &#123;<br>Score  <span class="hljs-type">float64</span> <span class="hljs-comment">// 分数</span><br>Member <span class="hljs-keyword">interface</span>&#123;&#125; <span class="hljs-comment">// 元素名</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-ZCard"><a href="#2-ZCard" class="headerlink" title="2.ZCard"></a>2.<code>ZCard</code></h2><p>返回集合元素个数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go">size, err := client.ZCard(<span class="hljs-string">&quot;key&quot;</span>).Result()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br>fmt.Println(size)<br></code></pre></td></tr></table></figure><h2 id="3-ZCount"><a href="#3-ZCount" class="headerlink" title="3.ZCount"></a>3.<code>ZCount</code></h2><p>统计某个分数范围内的元素个数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 返回： 1&lt;=分数&lt;=5 的元素个数, 注意：&quot;1&quot;, &quot;5&quot;两个参数是字符串</span><br>size, err := client.ZCount(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;5&quot;</span>).Result()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br>fmt.Println(size)<br><br><span class="hljs-comment">// 返回： 1&lt;分数&lt;=5 的元素个数</span><br><span class="hljs-comment">// 说明：默认第二，第三个参数是大于等于和小于等于的关系。</span><br><span class="hljs-comment">// 如果加上（ 则表示大于或者小于，相当于去掉了等于关系。</span><br>size, err := client.ZCount(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;(1&quot;</span>,<span class="hljs-string">&quot;5&quot;</span>).Result()<br></code></pre></td></tr></table></figure><h2 id="4-ZIncrBy"><a href="#4-ZIncrBy" class="headerlink" title="4.ZIncrBy"></a>4.<code>ZIncrBy</code></h2><p>增加元素的分数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 给元素5，加上2分</span><br>client.ZIncrBy(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-number">2</span>,<span class="hljs-string">&quot;5&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="5-ZRange-ZRevRange"><a href="#5-ZRange-ZRevRange" class="headerlink" title="5.ZRange,ZRevRange"></a>5.<code>ZRange,ZRevRange</code></h2><p>返回集合中某个索引范围的元素，根据分数从小到大排序</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 返回从0到-1位置的集合元素， 元素按分数从小到大排序</span><br><span class="hljs-comment">// 0到-1代表则返回全部数据</span><br>vals, err := client.ZRange(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-number">0</span>,<span class="hljs-number">-1</span>).Result()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br><br><span class="hljs-keyword">for</span> _, val := <span class="hljs-keyword">range</span> vals &#123;<br>fmt.Println(val)<br>&#125;<br></code></pre></td></tr></table></figure><p>ZRevRange用法跟ZRange一样，区别是ZRevRange的结果是按分数从大到小排序。</p><h2 id="6-ZRangeByScore"><a href="#6-ZRangeByScore" class="headerlink" title="6.ZRangeByScore"></a>6.<code>ZRangeByScore</code></h2><p>根据分数范围返回集合元素，元素根据分数从小到大排序，支持分页。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 初始化查询条件， Offset和Count用于分页</span><br>op := redis.ZRangeBy&#123;<br>Min:<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-comment">// 最小分数</span><br>Max:<span class="hljs-string">&quot;10&quot;</span>, <span class="hljs-comment">// 最大分数</span><br>Offset:<span class="hljs-number">0</span>, <span class="hljs-comment">// 类似sql的limit, 表示开始偏移量</span><br>Count:<span class="hljs-number">5</span>, <span class="hljs-comment">// 一次返回多少数据</span><br>&#125;<br><br>vals, err := client.ZRangeByScore(<span class="hljs-string">&quot;key&quot;</span>, op).Result()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br><br><span class="hljs-keyword">for</span> _, val := <span class="hljs-keyword">range</span> vals &#123;<br>fmt.Println(val)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-ZRevRangeByScore"><a href="#7-ZRevRangeByScore" class="headerlink" title="7.ZRevRangeByScore"></a>7.<code>ZRevRangeByScore</code></h2><p>用法类似ZRangeByScore，区别是元素根据分数从大到小排序。</p><h2 id="8-ZRangeByScoreWithScores"><a href="#8-ZRangeByScoreWithScores" class="headerlink" title="8.ZRangeByScoreWithScores"></a>8.<code>ZRangeByScoreWithScores</code></h2><p>用法跟ZRangeByScore一样，区别是除了返回集合元素，同时也返回元素对应的分数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 初始化查询条件， Offset和Count用于分页</span><br>op := redis.ZRangeBy&#123;<br>Min:<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-comment">// 最小分数</span><br>Max:<span class="hljs-string">&quot;10&quot;</span>, <span class="hljs-comment">// 最大分数</span><br>Offset:<span class="hljs-number">0</span>, <span class="hljs-comment">// 类似sql的limit, 表示开始偏移量</span><br>Count:<span class="hljs-number">5</span>, <span class="hljs-comment">// 一次返回多少数据</span><br>&#125;<br><br>vals, err := client.ZRangeByScoreWithScores(<span class="hljs-string">&quot;key&quot;</span>, op).Result()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br><br><span class="hljs-keyword">for</span> _, val := <span class="hljs-keyword">range</span> vals &#123;<br>fmt.Println(val.Member) <span class="hljs-comment">// 集合元素</span><br>fmt.Println(val.Score) <span class="hljs-comment">// 分数</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8-ZRem"><a href="#8-ZRem" class="headerlink" title="8.ZRem"></a>8.<code>ZRem</code></h2><p>删除集合元素</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 删除集合中的元素tizi</span><br>client.ZRem(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;tizi&quot;</span>)<br><br><span class="hljs-comment">// 删除集合中的元素tizi和xiaoli</span><br><span class="hljs-comment">// 支持一次删除多个元素</span><br>client.ZRem(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;tizi&quot;</span>, <span class="hljs-string">&quot;xiaoli&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="9-ZRemRangeByRank"><a href="#9-ZRemRangeByRank" class="headerlink" title="9.ZRemRangeByRank"></a>9.<code>ZRemRangeByRank</code></h2><p>根据索引范围删除元素</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 集合元素按分数排序，从最低分到高分，删除第0个元素到第5个元素。</span><br><span class="hljs-comment">// 这里相当于删除最低分的几个元素</span><br>client.ZRemRangeByRank(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>)<br><br><span class="hljs-comment">// 位置参数写成负数，代表从高分开始删除。</span><br><span class="hljs-comment">// 这个例子，删除最高分数的两个元素，-1代表最高分数的位置，-2第二高分，以此类推。</span><br>client.ZRemRangeByRank(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-2</span>)<br></code></pre></td></tr></table></figure><h2 id="10-ZRemRangeByScore"><a href="#10-ZRemRangeByScore" class="headerlink" title="10.ZRemRangeByScore"></a>10.<code>ZRemRangeByScore</code></h2><p>根据分数范围删除元素</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 删除范围： 2&lt;=分数&lt;=5 的元素</span><br>client.ZRemRangeByScore(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;5&quot;</span>)<br><br><span class="hljs-comment">// 删除范围： 2&lt;=分数&lt;5 的元素</span><br>client.ZRemRangeByScore(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;(5&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="11-ZScore"><a href="#11-ZScore" class="headerlink" title="11.ZScore"></a>11.<code>ZScore</code></h2><p>查询元素对应的分数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 查询集合元素tizi的分数</span><br>score, _ := client.ZScore(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;tizi&quot;</span>).Result()<br>fmt.Println(score)<br></code></pre></td></tr></table></figure><h2 id="12-ZRank"><a href="#12-ZRank" class="headerlink" title="12.ZRank"></a>12.<code>ZRank</code></h2><p>根据元素名，查询集合元素在集合中的排名，从0开始算，集合元素按分数从小到大排序</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">rk, _ := client.ZRank(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;tizi&quot;</span>).Result()<br>fmt.Println(rk)<br></code></pre></td></tr></table></figure><p>ZRevRank的作用跟ZRank一样，区别是ZRevRank是按分数从大到小排序。</p><h1 id="7-发布订阅"><a href="#7-发布订阅" class="headerlink" title="7.发布订阅"></a>7.发布订阅</h1><p>Redis提供了发布订阅功能，可以用于消息的传输，Redis的发布订阅机制包括三个部分，发布者，订阅者和Channel。</p><p>发布订阅架构图：</p><p><img src="https://raw.githubusercontent.com/Wishforpeace/Typora/main/pictureredis-pubsub-20220713145951000.jpg" alt="img"></p><p>发布者和订阅者都是Redis客户端，Channel则为Redis服务器端，发布者将消息发送到某个的频道，订阅了这个频道的订阅者就能接收到这条消息。Redis的这种发布订阅机制与基于主题的发布订阅类似，Channel相当于主题。</p><p>下面介绍golang如何使用redis的发布订阅功能。</p><p><strong>go redis发布订阅常用函数：</strong></p><ul><li>Subscribe - 订阅channel</li><li>PSubscribe - 订阅channel支持通配符匹配</li><li>Publish - 将信息发送到指定的channel。</li><li>PubSubChannels - 查询活跃的channel</li><li>PubSubNumSub - 查询指定的channel有多少个订阅者</li></ul><h2 id="1-Subscribe"><a href="#1-Subscribe" class="headerlink" title="1.Subscribe"></a>1.<code>Subscribe</code></h2><p>订阅channel</p><p>例子1：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 订阅channel1这个channel</span><br>sub := client.Subscribe(<span class="hljs-string">&quot;channel1&quot;</span>)<br><br><span class="hljs-comment">// 读取channel消息</span><br>iface, err := sub.Receive()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>    <span class="hljs-comment">// handle error</span><br>&#125;<br><br><span class="hljs-comment">// 检测收到的消息类型</span><br><span class="hljs-keyword">switch</span> iface.(<span class="hljs-keyword">type</span>) &#123;<br><span class="hljs-keyword">case</span> *redis.Subscription:<br>    <span class="hljs-comment">// 订阅成功</span><br><span class="hljs-keyword">case</span> *redis.Message:<br>    <span class="hljs-comment">// 处理收到的消息</span><br>    <span class="hljs-comment">// 这里需要做一下类型转换</span><br>    m := iface.(redis.Message)<br>    <span class="hljs-comment">// 打印收到的小</span><br>fmt.Println(m.Payload)<br><span class="hljs-keyword">case</span> *redis.Pong:<br>    <span class="hljs-comment">// 收到Pong消息</span><br><span class="hljs-keyword">default</span>:<br>    <span class="hljs-comment">// handle error</span><br>&#125;<br></code></pre></td></tr></table></figure><p>例子2：<br>使用golang channel的方式处理消息</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 订阅channel1这个channel</span><br>sub := client.Subscribe(<span class="hljs-string">&quot;channel1&quot;</span>)<br><br><span class="hljs-comment">// sub.Channel() 返回go channel，可以循环读取redis服务器发过来的消息</span><br><span class="hljs-keyword">for</span> msg := <span class="hljs-keyword">range</span> sub.Channel() &#123;<br><span class="hljs-comment">// 打印收到的消息</span><br>fmt.Println(msg.Channel)<br>fmt.Println(msg.Payload)<br>&#125;<br></code></pre></td></tr></table></figure><p>例子3：<br>取消订阅</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 订阅channel1这个channel</span><br>sub := client.Subscribe(<span class="hljs-string">&quot;channel1&quot;</span>)<br><br><span class="hljs-comment">// 忽略其他处理逻辑</span><br> <br><span class="hljs-comment">// 取消订阅</span><br>sub.Unsubscribe(<span class="hljs-string">&quot;channel1&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="2-PSubscribe"><a href="#2-PSubscribe" class="headerlink" title="2.PSubscribe"></a>2.<code>PSubscribe</code></h2><p>用法跟Subscribe一样，区别是PSubscribe订阅通道(channel)支持模式匹配。</p><p>例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 订阅channel1这个channel</span><br>sub := client.PSubscribe(<span class="hljs-string">&quot;ch_user_*&quot;</span>)<br><span class="hljs-comment">// 可以匹配ch_user_开头的任意channel</span><br></code></pre></td></tr></table></figure><h2 id="3-Publish"><a href="#3-Publish" class="headerlink" title="3.Publish"></a>3.<code>Publish</code></h2><p>将消息发送到指定的channel</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 将&quot;message&quot;消息发送到channel1这个通道上</span><br>client.Publish(<span class="hljs-string">&quot;channel1&quot;</span>,<span class="hljs-string">&quot;message&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="4-PubSubChannels"><a href="#4-PubSubChannels" class="headerlink" title="4.PubSubChannels"></a>4.<code>PubSubChannels</code></h2><p>查询活跃的channel</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 没有指定查询channel的匹配模式，则返回所有的channel</span><br>chs, _ := client.PubSubChannels(<span class="hljs-string">&quot;&quot;</span>).Result()<br><span class="hljs-keyword">for</span> _, ch := <span class="hljs-keyword">range</span> chs &#123;<br>fmt.Println(ch)<br>&#125;<br><br><span class="hljs-comment">// 匹配user_开头的channel</span><br>chs, _ := client.PubSubChannels(<span class="hljs-string">&quot;user_*&quot;</span>).Result()<br></code></pre></td></tr></table></figure><h2 id="5-PubSubNumSub"><a href="#5-PubSubNumSub" class="headerlink" title="5.PubSubNumSub"></a>5.<code>PubSubNumSub</code></h2><p>查询指定的channel有多少个订阅者</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 查询channel1，channel2两个通道的订阅者数量</span><br>chs, _ := client.PubSubNumSub(<span class="hljs-string">&quot;channel1&quot;</span>, <span class="hljs-string">&quot;channel2&quot;</span>).Result()<br><span class="hljs-keyword">for</span> ch, count := <span class="hljs-keyword">range</span> chs &#123;<br>fmt.Println(ch) <span class="hljs-comment">// channel名字</span><br>fmt.Println(count) <span class="hljs-comment">// channel的订阅者数量</span><br>&#125;<br></code></pre></td></tr></table></figure><p>redis事务可以一次执行多个命令， 并且带有以下两个重要的保证：</p><ul><li>事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</li><li>事务是一个原子操作：事务中的命令要么全部被执行，要么全部都不执行。</li></ul><h1 id="8-事务"><a href="#8-事务" class="headerlink" title="8.事务"></a>8.事务</h1><p>下面介绍golang redis事务用法。</p><p><strong>go redis事务常用函数：</strong></p><ul><li>TxPipeline - 以Pipeline的方式操作事务</li><li>Watch - redis乐观锁支持</li></ul><h2 id="1-TxPipeline"><a href="#1-TxPipeline" class="headerlink" title="1.TxPipeline"></a>1.<code>TxPipeline</code></h2><p>以Pipeline的方式操作事务</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 开启一个TxPipeline事务</span><br>pipe := client.TxPipeline()<br><br><span class="hljs-comment">// 执行事务操作，可以通过pipe读写redis</span><br>incr := pipe.Incr(<span class="hljs-string">&quot;tx_pipeline_counter&quot;</span>)<br>pipe.Expire(<span class="hljs-string">&quot;tx_pipeline_counter&quot;</span>, time.Hour)<br><br><span class="hljs-comment">// 上面代码等同于执行下面redis命令</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//     MULTI</span><br><span class="hljs-comment">//     INCR pipeline_counter</span><br><span class="hljs-comment">//     EXPIRE pipeline_counts 3600</span><br><span class="hljs-comment">//     EXEC</span><br><br><span class="hljs-comment">// 通过Exec函数提交redis事务</span><br>_, err := pipe.Exec()<br><br><span class="hljs-comment">// 提交事务后，我们可以查询事务操作的结果</span><br><span class="hljs-comment">// 前面执行Incr函数，在没有执行exec函数之前，实际上还没开始运行。</span><br>fmt.Println(incr.Val(), err)<br></code></pre></td></tr></table></figure><h2 id="2-watch"><a href="#2-watch" class="headerlink" title="2.watch"></a>2.<code>watch</code></h2><p>redis乐观锁支持，可以通过watch监听一些Key, 如果这些key的值没有被其他人改变的话，才可以提交事务。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 定义一个回调函数，用于处理事务逻辑</span><br>fn := <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(tx *redis.Tx)</span></span> <span class="hljs-type">error</span> &#123;<br><span class="hljs-comment">// 先查询下当前watch监听的key的值</span><br>v, err := tx.Get(<span class="hljs-string">&quot;key&quot;</span>).Result()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &amp;&amp; err != redis.Nil &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><br><span class="hljs-comment">// 这里可以处理业务</span><br>fmt.Println(v)<br><br><span class="hljs-comment">// 如果key的值没有改变的话，Pipelined函数才会调用成功</span><br>_, err = tx.Pipelined(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(pipe redis.Pipeliner)</span></span> <span class="hljs-type">error</span> &#123;<br><span class="hljs-comment">// 在这里给key设置最新值</span><br>pipe.Set(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;new value&quot;</span>, <span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;)<br><span class="hljs-keyword">return</span> err<br>&#125;<br><br><span class="hljs-comment">// 使用Watch监听一些Key, 同时绑定一个回调函数fn, 监听Key后的逻辑写在fn这个回调函数里面</span><br><span class="hljs-comment">// 如果想监听多个key，可以这么写：client.Watch(fn, &quot;key1&quot;, &quot;key2&quot;, &quot;key3&quot;)</span><br>client.Watch(fn, <span class="hljs-string">&quot;key&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>MySQL学习笔记</title>
    <link href="/2022/07/09/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/07/09/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL学习笔记"><a href="#MySQL学习笔记" class="headerlink" title="MySQL学习笔记"></a>MySQL学习笔记</h1><h2 id="一、登录MySQL"><a href="#一、登录MySQL" class="headerlink" title="一、登录MySQL"></a>一、登录MySQL</h2><p>当 MySQL 服务已经运行时, 我们可以通过 MySQL 自带的客户端工具登录到 MySQL 数据库中, 首先打开命令提示符, 输入以下格式的命名:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">mysql -h 主机名 -u 用户名 -<span class="hljs-selector-tag">p</span><br></code></pre></td></tr></table></figure><p>参数说明：</p><ul><li><strong>-h</strong> : 指定客户端所要登录的 MySQL 主机名, 登录本机(localhost 或 127.0.0.1)该参数可以省略;</li><li><strong>-u</strong> : 登录的用户名;</li><li><strong>-p</strong> : 告诉服务器将会使用一个密码来登录, 如果所要登录的用户名密码为空, 可以忽略此选项。</li></ul><p>如果我们要登录本机的 MySQL 数据库，只需要输入以下命令即可：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">mysql -u root -<span class="hljs-selector-tag">p</span><br></code></pre></td></tr></table></figure><p>按回车确认, 如果安装正确且 MySQL 正在运行, 会得到以下响应:</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-built_in">Enter</span> <span class="hljs-variable">password</span><span class="hljs-operator">:</span><br></code></pre></td></tr></table></figure><p>若密码存在, 输入密码登录, 不存在则直接按回车登录。登录成功后你将会看到 Welcome to the MySQL monitor… 的提示语。</p><p>然后命令提示符会一直以 <strong>mysq&gt;</strong> 加一个闪烁的光标等待命令的输入, 输入 <strong>exit</strong> 或 <strong>quit</strong> 退出登录。</p><h2 id="二、MySQL管理"><a href="#二、MySQL管理" class="headerlink" title="二、MySQL管理"></a>二、MySQL管理</h2><h3 id="启动及关闭MySQL服务器"><a href="#启动及关闭MySQL服务器" class="headerlink" title="启动及关闭MySQL服务器"></a>启动及关闭MySQL服务器</h3><h4 id="Linux系统"><a href="#Linux系统" class="headerlink" title="Linux系统"></a>Linux系统</h4><p>首先我们通过命令检查MySQL服务器是否启动</p><p><code>ps -ef | grep mysqld</code></p><p>如果MySql已经启动，以上命令将输出mysql进程列表， 如果mysql未启动，你可以使用以下命令来启动mysql服务器:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">root@host# </span><span class="language-bash"><span class="hljs-built_in">cd</span> /usr/bin</span><br>./mysqld_safe &amp;<br></code></pre></td></tr></table></figure><p>如果你想关闭目前运行的 MySQL 服务器, 你可以执行以下命令:</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autoit">root<span class="hljs-symbol">@host</span><span class="hljs-meta"># cd /usr/bin</span><br>./mysqladmin -u root -p <span class="hljs-built_in">shutdown</span><br>Enter password: ******<br></code></pre></td></tr></table></figure><h3 id="MySQL-用户设置"><a href="#MySQL-用户设置" class="headerlink" title="MySQL 用户设置"></a>MySQL 用户设置</h3><p>如果你需要添加 MySQL 用户，你只需要在 mysql 数据库中的 user 表添加新用户即可。</p><p>以下为添加用户的的实例，用户名为guest，密码为guest123，并授权用户可进行 SELECT, INSERT 和 UPDATE操作权限：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">root@host# mysql -u root -p<br>Enter <span class="hljs-keyword">password</span>:*******<br>mysql&gt; use mysql;<br><span class="hljs-keyword">Database</span> changed<br><br>mysql&gt; <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-keyword">user</span> <br>          (host, <span class="hljs-keyword">user</span>, <span class="hljs-keyword">password</span>, <br>           select_priv, insert_priv, update_priv) <br>           <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;localhost&#x27;</span>, <span class="hljs-string">&#x27;guest&#x27;</span>, <br>           <span class="hljs-keyword">PASSWORD</span>(<span class="hljs-string">&#x27;guest123&#x27;</span>), <span class="hljs-string">&#x27;Y&#x27;</span>, <span class="hljs-string">&#x27;Y&#x27;</span>, <span class="hljs-string">&#x27;Y&#x27;</span>);<br>Query OK, <span class="hljs-number">1</span> <span class="hljs-keyword">row</span> affected (<span class="hljs-number">0.20</span> sec)<br><br>mysql&gt; FLUSH <span class="hljs-keyword">PRIVILEGES</span>;<br>Query OK, <span class="hljs-number">1</span> <span class="hljs-keyword">row</span> affected (<span class="hljs-number">0.01</span> sec)<br><br>mysql&gt; <span class="hljs-keyword">SELECT</span> host, <span class="hljs-keyword">user</span>, <span class="hljs-keyword">password</span> <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">user</span> = <span class="hljs-string">&#x27;guest&#x27;</span>;<br>+<span class="hljs-comment">-----------+---------+------------------+</span><br>| host      | <span class="hljs-keyword">user</span>    | <span class="hljs-keyword">password</span>         |<br>+<span class="hljs-comment">-----------+---------+------------------+</span><br>| localhost | guest | <span class="hljs-number">6</span>f8c114b58f2ce9e |<br>+<span class="hljs-comment">-----------+---------+------------------+</span><br><span class="hljs-number">1</span> <span class="hljs-keyword">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><p>在添加用户时，请注意使用MySQL提供的 PASSWORD() 函数来对密码进行加密。 你可以在以上实例看到用户密码加密后为： 6f8c114b58f2ce9e.</p><p><strong>注意：</strong>在 MySQL5.7 中 user 表的 password 已换成了<strong>authentication_string</strong>。</p><p><strong>注意：</strong>password() 加密函数已经在 8.0.11 中移除了，可以使用 MD5() 函数代替。</p><p><strong>注意：</strong>在注意需要执行 <strong>FLUSH PRIVILEGES</strong> 语句。 这个命令执行后会重新载入授权表。</p><p>如果你不使用该命令，你就无法使用新创建的用户来连接mysql服务器，除非你重启mysql服务器。</p><p>你可以在创建用户时，为用户指定权限，在对应的权限列中，在插入语句中设置为 ‘Y’ 即可，用户权限列表如下：</p><ul><li>Select_priv</li><li>Insert_priv</li><li>Update_priv</li><li>Delete_priv</li><li>Create_priv</li><li>Drop_priv</li><li>Reload_priv</li><li>Shutdown_priv</li><li>Process_priv</li><li>File_priv</li><li>Grant_priv</li><li>References_priv</li><li>Index_priv</li><li>Alter_priv</li></ul><p>另外一种添加用户的方法为通过SQL的 GRANT 命令，以下命令会给指定数据库TUTORIALS添加用户 zara ，密码为 zara123 。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">root@host# mysql -u root -p<br>Enter <span class="hljs-keyword">password</span>:*******<br>mysql&gt; use mysql;<br><span class="hljs-keyword">Database</span> changed<br><br>mysql&gt; <span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">SELECT</span>,<span class="hljs-keyword">INSERT</span>,<span class="hljs-keyword">UPDATE</span>,<span class="hljs-keyword">DELETE</span>,<span class="hljs-keyword">CREATE</span>,<span class="hljs-keyword">DROP</span><br>    -&gt; <span class="hljs-keyword">ON</span> TUTORIALS.*<br>    -&gt; <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;zara&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span><br>    -&gt; IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;zara123&#x27;</span>;<br></code></pre></td></tr></table></figure><p>以上命令会在mysql数据库中的user表创建一条用户信息记录。</p><p><strong>注意:</strong> MySQL 的SQL语句以分号 (;) 作为结束标识。</p><h3 id="x2F-etc-x2F-my-cnf-文件配置"><a href="#x2F-etc-x2F-my-cnf-文件配置" class="headerlink" title="&#x2F;etc&#x2F;my.cnf 文件配置"></a>&#x2F;etc&#x2F;my.cnf 文件配置</h3><p>一般情况下，你不需要修改该配置文件，该文件默认配置如下：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[mysqld]<br>datadir=<span class="hljs-regexp">/var/</span>lib/mysql<br>socket=<span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/mysql/my</span>sql.sock<br><br>[mysql.server]<br>user=mysql<br>basedir=<span class="hljs-regexp">/var/</span>lib<br><br>[safe_mysqld]<br>err-log=<span class="hljs-regexp">/var/</span>log/mysqld.log<br>pid-<span class="hljs-keyword">file</span>=<span class="hljs-regexp">/var/</span>run<span class="hljs-regexp">/mysqld/my</span>sqld.pid<br></code></pre></td></tr></table></figure><p>在配置文件中，你可以指定不同的错误日志文件存放的目录，一般你不需要改动这些配置。</p><hr><h3 id="管理MySQL的命令"><a href="#管理MySQL的命令" class="headerlink" title="管理MySQL的命令"></a>管理MySQL的命令</h3><p>以下列出了使用Mysql数据库过程中常用的命令：</p><ul><li><p><strong>USE *数据库名*</strong> :<br>选择要操作的Mysql数据库，使用该命令后所有Mysql命令都只针对该数据库。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">mysql&gt; use RUNOOB<span class="hljs-comment">;</span><br>Database changed<br></code></pre></td></tr></table></figure></li><li><p><strong>SHOW DATABASES:</strong><br>列出 MySQL 数据库管理系统的数据库列表。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">mysql&gt; SHOW DATABASES;</span><br><span class="hljs-section">+--------------------+</span><br><span class="hljs-section">| Database           |</span><br><span class="hljs-section">+--------------------+</span><br>| information<span class="hljs-emphasis">_schema |</span><br><span class="hljs-emphasis">| RUNOOB             |</span><br><span class="hljs-emphasis">| cdcol              |</span><br><span class="hljs-emphasis">| mysql              |</span><br><span class="hljs-emphasis">| onethink           |</span><br><span class="hljs-emphasis">| performance_</span>schema |<br>| phpmyadmin         |<br>| test               |<br>| wecenter           |<br><span class="hljs-section">| wordpress          |</span><br><span class="hljs-section">+--------------------+</span><br>10 rows in set (0.02 sec)<br></code></pre></td></tr></table></figure></li><li><p><strong>SHOW TABLES:</strong><br>显示指定数据库的所有表，使用该命令前需要使用 use 命令来选择要操作的数据库。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">mysql&gt; use RUNOOB;<br>Database changed<br><span class="hljs-section">mysql&gt; SHOW TABLES;</span><br><span class="hljs-section">+------------------+</span><br><span class="hljs-section">| Tables_in_runoob |</span><br><span class="hljs-section">+------------------+</span><br>| employee<span class="hljs-emphasis">_tbl     |</span><br><span class="hljs-emphasis">| runoob_tbl       |</span><br><span class="hljs-emphasis">| tcount_</span>tbl       |<br><span class="hljs-code">+------------------+</span><br>3 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure></li><li><p><strong>SHOW COLUMNS FROM *数据表*:</strong><br>显示数据表的属性，属性类型，主键信息 ，是否为 NULL，默认值等其他信息。</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">mysql&gt; SHOW COLUMNS FROM runoob_tbl;<br>+-----------------+--------------+------+-----+---------+-------+<br>|<span class="hljs-string"> Field           </span>|<span class="hljs-string"> Type         </span>|<span class="hljs-string"> Null </span>|<span class="hljs-string"> Key </span>|<span class="hljs-string"> Default </span>|<span class="hljs-string"> Extra </span>|<br>+-----------------+--------------+------+-----+---------+-------+<br>|<span class="hljs-string"> runoob_id       </span>|<span class="hljs-string"> int(11)      </span>|<span class="hljs-string"> NO   </span>|<span class="hljs-string"> PRI </span>|<span class="hljs-string"> NULL    </span>|<span class="hljs-string">       </span>|<br>|<span class="hljs-string"> runoob_title    </span>|<span class="hljs-string"> varchar(255) </span>|<span class="hljs-string"> YES  </span>|<span class="hljs-string">     </span>|<span class="hljs-string"> NULL    </span>|<span class="hljs-string">       </span>|<br>|<span class="hljs-string"> runoob_author   </span>|<span class="hljs-string"> varchar(255) </span>|<span class="hljs-string"> YES  </span>|<span class="hljs-string">     </span>|<span class="hljs-string"> NULL    </span>|<span class="hljs-string">       </span>|<br>|<span class="hljs-string"> submission_date </span>|<span class="hljs-string"> date         </span>|<span class="hljs-string"> YES  </span>|<span class="hljs-string">     </span>|<span class="hljs-string"> NULL    </span>|<span class="hljs-string">       </span>|<br>+-----------------+--------------+------+-----+---------+-------+<br>4 rows in set (0.01 sec)<br></code></pre></td></tr></table></figure></li><li><p><strong>SHOW INDEX FROM *数据表*:</strong><br>显示数据表的详细索引信息，包括PRIMARY KEY（主键）。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">mysql&gt; SHOW INDEX FROM runoob_tbl;<br>+<span class="hljs-params">------------</span>+<span class="hljs-params">------------</span>+<span class="hljs-params">----------</span>+<span class="hljs-params">--------------</span>+<span class="hljs-params">-------------</span>+<span class="hljs-params">-----------</span>+<span class="hljs-params">-------------</span>+<span class="hljs-params">----------</span>+<span class="hljs-params">--------</span>+<span class="hljs-params">------</span>+<span class="hljs-params">------------</span>+<span class="hljs-params">---------</span>+<span class="hljs-params">---------------</span>+<br>| Table      | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment |<br>+<span class="hljs-params">------------</span>+<span class="hljs-params">------------</span>+<span class="hljs-params">----------</span>+<span class="hljs-params">--------------</span>+<span class="hljs-params">-------------</span>+<span class="hljs-params">-----------</span>+<span class="hljs-params">-------------</span>+<span class="hljs-params">----------</span>+<span class="hljs-params">--------</span>+<span class="hljs-params">------</span>+<span class="hljs-params">------------</span>+<span class="hljs-params">---------</span>+<span class="hljs-params">---------------</span>+<br>| runoob_tbl |          0 | PRIMARY  |            1 | runoob_id   | A         |           2 |     NULL | NULL   |      | BTREE      |         |               |<br>+<span class="hljs-params">------------</span>+<span class="hljs-params">------------</span>+<span class="hljs-params">----------</span>+<span class="hljs-params">--------------</span>+<span class="hljs-params">-------------</span>+<span class="hljs-params">-----------</span>+<span class="hljs-params">-------------</span>+<span class="hljs-params">----------</span>+<span class="hljs-params">--------</span>+<span class="hljs-params">------</span>+<span class="hljs-params">------------</span>+<span class="hljs-params">---------</span>+<span class="hljs-params">---------------</span>+<br>1 row in <span class="hljs-keyword">set</span> <span class="hljs-params">(0.00 sec)</span><br></code></pre></td></tr></table></figure></li><li><p><strong>SHOW TABLE STATUS [FROM db_name] [LIKE ‘pattern’] \G:</strong><br>该命令将输出Mysql数据库管理系统的性能及统计信息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">TABLE</span> STATUS  <span class="hljs-keyword">FROM</span> RUNOOB;   # 显示数据库 RUNOOB 中所有表的信息<br><br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">TABLE</span> STATUS <span class="hljs-keyword">from</span> RUNOOB <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;runoob%&#x27;</span>;     # 表名以runoob开头的表的信息<br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">TABLE</span> STATUS <span class="hljs-keyword">from</span> RUNOOB <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;runoob%&#x27;</span>\G;   # 加上 \G，查询结果按列打印<br></code></pre></td></tr></table></figure></li></ul><p>Gif 图演示：</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/03/mysql-admin.gif" alt="img"></p><h2 id="三、MySQL-PHP语法"><a href="#三、MySQL-PHP语法" class="headerlink" title="三、MySQL PHP语法"></a>三、MySQL PHP语法</h2><p>MySQL 可应用于多种语言，包括 PERL, C, C++, JAVA 和 PHP，在这些语言中，MySQL 在 PHP 的 web 开发中是应用最广泛。</p><p>在本教程中我们大部分实例都采用了 PHP 语言。如果你想了解 MySQL 在 PHP 中的应用，可以访问我们的 <a href="https://www.runoob.com/php/php-mysql-intro.html">PHP 中使用 Mysqli 介绍</a>。</p><p>PHP 提供了多种方式来访问和操作Mysql数据库记录。PHP MySQL 函数格式如下：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-function"><span class="hljs-title">mysqli_function</span>(<span class="hljs-params">value,value,...</span>)</span>;<br></code></pre></td></tr></table></figure><p>以上格式中 function部分描述了mysql函数的功能，如</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">mysqli_connect</span>($connect);<br><span class="hljs-built_in">mysqli_query</span>($connect,&quot;SQL 语句&quot;);<br><span class="hljs-built_in">mysqli_fetch_array</span>()<br><span class="hljs-built_in">mysqli_close</span>()<br></code></pre></td></tr></table></figure><p>以下实例展示了PHP调用mysql函数的语法：</p><h3 id="实例-MySQLi"><a href="#实例-MySQLi" class="headerlink" title="实例 (MySQLi)"></a>实例 (MySQLi)</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$retval</span> = <span class="hljs-title function_ invoke__">mysqli_function</span>(value, [value,...]);<br><span class="hljs-keyword">if</span>( !<span class="hljs-variable">$retval</span> )<br>&#123;<br>   <span class="hljs-keyword">die</span> ( <span class="hljs-string">&quot;相关错误信息&quot;</span> );<br>&#125;<br><span class="hljs-comment">// 其他 MySQL 或 PHP 语句</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="四、MySQL连接"><a href="#四、MySQL连接" class="headerlink" title="四、MySQL连接"></a>四、MySQL连接</h2><h3 id="使用mysql二进制方式连接"><a href="#使用mysql二进制方式连接" class="headerlink" title="使用mysql二进制方式连接"></a>使用mysql二进制方式连接</h3><p>您可以使用MySQL二进制方式进入到mysql命令提示符下来连接MySQL数据库。</p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>以下是从命令行中连接mysql服务器的简单实例：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@host]</span><span class="hljs-meta"># mysql -u root -p</span><br>Enter password:******<br></code></pre></td></tr></table></figure><p>在登录成功后会出现 mysql&gt; 命令提示窗口，你可以在上面执行任何 SQL 语句。</p><p>以上命令执行后，登录成功输出结果如下:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Welcome <span class="hljs-keyword">to</span> the MySQL monitor.  Commands <span class="hljs-keyword">end</span> <span class="hljs-keyword">with</span> ; <span class="hljs-keyword">or</span> \g.<br>Your MySQL <span class="hljs-keyword">connection</span> id <span class="hljs-keyword">is</span> <span class="hljs-number">2854760</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">server</span> <span class="hljs-keyword">version</span>: <span class="hljs-number">5.0</span><span class="hljs-number">.9</span><br><br><span class="hljs-keyword">Type</span> <span class="hljs-string">&#x27;help;&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;\h&#x27;</span> <span class="hljs-keyword">for</span> help. <span class="hljs-keyword">Type</span> <span class="hljs-string">&#x27;\c&#x27;</span> <span class="hljs-keyword">to</span> clear the buffer.<br></code></pre></td></tr></table></figure><p>在以上实例中，我们使用了root用户登录到mysql服务器，当然你也可以使用其他mysql用户登录。</p><p>如果用户权限足够，任何用户都可以在mysql的命令提示窗口中进行SQL操作。</p><p>退出 mysql&gt; 命令提示窗口可以使用 exit 命令，如下所示：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">mysql&gt; <span class="hljs-keyword">exit</span><br>Bye<br></code></pre></td></tr></table></figure><hr><h3 id="使用-PHP-脚本连接-MySQL"><a href="#使用-PHP-脚本连接-MySQL" class="headerlink" title="使用 PHP 脚本连接 MySQL"></a>使用 PHP 脚本连接 MySQL</h3><p>PHP 提供了 mysqli_connect() 函数来连接数据库。</p><p>该函数有 6 个参数，在成功链接到 MySQL 后返回连接标识，失败返回 FALSE 。</p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">mysqli<span class="hljs-constructor">_connect(<span class="hljs-params">host</span>, <span class="hljs-params">username</span>, <span class="hljs-params">password</span>, <span class="hljs-params">dbname</span>,<span class="hljs-params">port</span>, <span class="hljs-params">socket</span>)</span>;<br></code></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>host</em></td><td align="left">可选。规定主机名或 IP 地址。</td></tr><tr><td align="left"><em>username</em></td><td align="left">可选。规定 MySQL 用户名。</td></tr><tr><td align="left"><em>password</em></td><td align="left">可选。规定 MySQL 密码。</td></tr><tr><td align="left"><em>dbname</em></td><td align="left">可选。规定默认使用的数据库。</td></tr><tr><td align="left"><em>port</em></td><td align="left">可选。规定尝试连接到 MySQL 服务器的端口号。</td></tr><tr><td align="left"><em>socket</em></td><td align="left">可选。规定 socket 或要使用的已命名 pipe。</td></tr></tbody></table><p>你可以使用 PHP 的 mysqli_close() 函数来断开与 MySQL 数据库的链接。</p><p>该函数只有一个参数为 mysqli_connect() 函数创建连接成功后返回的 MySQL 连接标识符。</p><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">bool</span> mysqli_close ( mysqli <span class="hljs-variable">$link</span> )<br></code></pre></td></tr></table></figure><p>本函数关闭指定的连接标识所关联的到 MySQL 服务器的非持久连接。如果没有指定 link_identifier，则关闭上一个打开的连接。</p><p><strong>提示：</strong>通常不需要使用 mysqli_close()，因为已打开的非持久连接会在脚本执行完毕后自动关闭。</p><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>你可以尝试以下实例来连接到你的 MySQL 服务器:</p><h3 id="连接-MySQL"><a href="#连接-MySQL" class="headerlink" title="连接 MySQL"></a>连接 MySQL</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-variable">$dbhost</span> = <span class="hljs-string">&#x27;localhost&#x27;</span>;  <span class="hljs-comment">// mysql服务器主机地址 </span><br><span class="hljs-variable">$dbuser</span> = <span class="hljs-string">&#x27;root&#x27;</span>;            <span class="hljs-comment">// mysql用户名 </span><br><span class="hljs-variable">$dbpass</span> = <span class="hljs-string">&#x27;123456&#x27;</span>;          <span class="hljs-comment">// mysql用户名密码 </span><br><span class="hljs-variable">$conn</span> = <span class="hljs-title function_ invoke__">mysqli_connect</span>(<span class="hljs-variable">$dbhost</span>, <span class="hljs-variable">$dbuser</span>, <span class="hljs-variable">$dbpass</span>); <br><span class="hljs-keyword">if</span>(! <span class="hljs-variable">$conn</span> ) <br>&#123;    <br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Could not connect: &#x27;</span> . <span class="hljs-title function_ invoke__">mysqli_error</span>()); <br>&#125; <br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;数据库连接成功！&#x27;</span>; <br><span class="hljs-title function_ invoke__">mysqli_close</span>(<span class="hljs-variable">$conn</span>); <br><span class="hljs-meta">?&gt;</span><br><br><br><br><br></code></pre></td></tr></table></figure><h2 id="五、创建数据库"><a href="#五、创建数据库" class="headerlink" title="五、创建数据库"></a>五、创建数据库</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">DATABASE</span> 数据库名;<br></code></pre></td></tr></table></figure><p>以下命令简单的演示了创建数据库的过程，数据名为 RUNOOB:</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@host]</span><span class="hljs-meta"># mysql -u root -p   </span><br>Enter password:******  <span class="hljs-meta"># 登录后进入终端</span><br><br>mysql&gt; create DATABASE RUNOOB<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h2 id="六、删除数据库"><a href="#六、删除数据库" class="headerlink" title="六、删除数据库"></a>六、删除数据库</h2><h3 id="drop-命令删除数据库"><a href="#drop-命令删除数据库" class="headerlink" title="drop 命令删除数据库"></a>drop 命令删除数据库</h3><p>drop 命令格式：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">database</span> &lt;数据库名&gt;;<br></code></pre></td></tr></table></figure><p>例如删除名为 RUNOOB 的数据库：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">mysql&gt; <span class="hljs-keyword">drop</span> <span class="hljs-keyword">database</span> RUNOOB;<br></code></pre></td></tr></table></figure><h3 id="使用-mysqladmin-删除数据库"><a href="#使用-mysqladmin-删除数据库" class="headerlink" title="使用 mysqladmin 删除数据库"></a>使用 mysqladmin 删除数据库</h3><p>你也可以使用 mysql <strong>mysqladmin</strong> 命令在终端来执行删除命令。</p><p>以下实例删除数据库 RUNOOB(该数据库在前一章节已创建)：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@host]</span><span class="hljs-meta"># mysqladmin -u root -p drop RUNOOB</span><br>Enter password:******<br></code></pre></td></tr></table></figure><p>执行以上删除数据库命令后，会出现一个提示框，来确认是否真的删除数据库：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Dropping the <span class="hljs-keyword">database</span> <span class="hljs-keyword">is</span> potentially a very bad thing <span class="hljs-keyword">to</span> <span class="hljs-keyword">do</span>.<br><span class="hljs-keyword">Any</span> data stored <span class="hljs-keyword">in</span> the <span class="hljs-keyword">database</span> will be destroyed.<br><br><span class="hljs-keyword">Do</span> you really want <span class="hljs-keyword">to</span> <span class="hljs-keyword">drop</span> the <span class="hljs-string">&#x27;RUNOOB&#x27;</span> <span class="hljs-keyword">database</span> [y/N] y<br><span class="hljs-keyword">Database</span> &quot;RUNOOB&quot; dropped<br></code></pre></td></tr></table></figure><h2 id="七、选择数据库"><a href="#七、选择数据库" class="headerlink" title="七、选择数据库"></a>七、选择数据库</h2><h3 id="从命令提示窗口中选择MySQL数据库"><a href="#从命令提示窗口中选择MySQL数据库" class="headerlink" title="从命令提示窗口中选择MySQL数据库"></a>从命令提示窗口中选择MySQL数据库</h3><p>在 mysql&gt; 提示窗口中可以很简单的选择特定的数据库。你可以使用SQL命令来选择指定的数据库。</p><h4 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h4><p>以下实例选取了数据库 RUNOOB:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-attr">[root@host]</span># mysql -u root -<span class="hljs-selector-tag">p</span><br>Enter password:******<br>mysql&gt; use RUNOOB;<br>Database changed<br>mysql&gt;<br></code></pre></td></tr></table></figure><p>执行以上命令后，你就已经成功选择了 RUNOOB 数据库，在后续的操作中都会在 RUNOOB 数据库中执行。</p><h2 id="八、数据类型"><a href="#八、数据类型" class="headerlink" title="八、数据类型"></a>八、数据类型</h2><h3 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h3><p>MySQL 支持所有标准 SQL 数值数据类型。</p><p>这些类型包括严格数值数据类型(INTEGER、SMALLINT、DECIMAL 和 NUMERIC)，以及近似数值数据类型(FLOAT、REAL 和 DOUBLE PRECISION)。</p><p>关键字INT是INTEGER的同义词，关键字DEC是DECIMAL的同义词。</p><p>BIT数据类型保存位字段值，并且支持 MyISAM、MEMORY、InnoDB 和 BDB表。</p><p>作为 SQL 标准的扩展，MySQL 也支持整数类型 TINYINT、MEDIUMINT 和 BIGINT。下面的表显示了需要的每个整数类型的存储和范围。</p><table><thead><tr><th align="left">类型</th><th align="left">大小</th><th align="left">范围（有符号）</th><th align="left">范围（无符号）</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">TINYINT</td><td align="left">1 Bytes</td><td align="left">(-128，127)</td><td align="left">(0，255)</td><td align="left">小整数值</td></tr><tr><td align="left">SMALLINT</td><td align="left">2 Bytes</td><td align="left">(-32 768，32 767)</td><td align="left">(0，65 535)</td><td align="left">大整数值</td></tr><tr><td align="left">MEDIUMINT</td><td align="left">3 Bytes</td><td align="left">(-8 388 608，8 388 607)</td><td align="left">(0，16 777 215)</td><td align="left">大整数值</td></tr><tr><td align="left">INT或INTEGER</td><td align="left">4 Bytes</td><td align="left">(-2 147 483 648，2 147 483 647)</td><td align="left">(0，4 294 967 295)</td><td align="left">大整数值</td></tr><tr><td align="left">BIGINT</td><td align="left">8 Bytes</td><td align="left">(-9,223,372,036,854,775,808，9 223 372 036 854 775 807)</td><td align="left">(0，18 446 744 073 709 551 615)</td><td align="left">极大整数值</td></tr><tr><td align="left">FLOAT</td><td align="left">4 Bytes</td><td align="left">(-3.402 823 466 E+38，-1.175 494 351 E-38)，0，(1.175 494 351 E-38，3.402 823 466 351 E+38)</td><td align="left">0，(1.175 494 351 E-38，3.402 823 466 E+38)</td><td align="left">单精度 浮点数值</td></tr><tr><td align="left">DOUBLE</td><td align="left">8 Bytes</td><td align="left">(-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td align="left">0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td align="left">双精度 浮点数值</td></tr><tr><td align="left">DECIMAL</td><td align="left">对DECIMAL(M,D) ，如果M&gt;D，为M+2否则为D+2</td><td align="left">依赖于M和D的值</td><td align="left">依赖于M和D的值</td><td align="left">小数值</td></tr></tbody></table><hr><h3 id="日期和时间类型"><a href="#日期和时间类型" class="headerlink" title="日期和时间类型"></a>日期和时间类型</h3><p>表示时间值的日期和时间类型为DATETIME、DATE、TIMESTAMP、TIME和YEAR。</p><p>每个时间类型有一个有效值范围和一个”零”值，当指定不合法的MySQL不能表示的值时使用”零”值。</p><p>TIMESTAMP类型有专有的自动更新特性，将在后面描述。</p><table><thead><tr><th align="left">类型</th><th align="left">大小 ( bytes)</th><th align="left">范围</th><th align="left">格式</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">DATE</td><td align="left">3</td><td align="left">1000-01-01&#x2F;9999-12-31</td><td align="left">YYYY-MM-DD</td><td align="left">日期值</td></tr><tr><td align="left">TIME</td><td align="left">3</td><td align="left">‘-838:59:59’&#x2F;‘838:59:59’</td><td align="left">HH:MM:SS</td><td align="left">时间值或持续时间</td></tr><tr><td align="left">YEAR</td><td align="left">1</td><td align="left">1901&#x2F;2155</td><td align="left">YYYY</td><td align="left">年份值</td></tr><tr><td align="left">DATETIME</td><td align="left">8</td><td align="left">1000-01-01 00:00:00&#x2F;9999-12-31 23:59:59</td><td align="left">YYYY-MM-DD HH:MM:SS</td><td align="left">混合日期和时间值</td></tr><tr><td align="left">TIMESTAMP</td><td align="left">4</td><td align="left">1970-01-01 00:00:00&#x2F;2038结束时间是第 <strong>2147483647</strong> 秒，北京时间 <strong>2038-1-19 11:14:07</strong>，格林尼治时间 2038年1月19日 凌晨 03:14:07</td><td align="left">YYYYMMDD HHMMSS</td><td align="left">混合日期和时间值，时间戳</td></tr></tbody></table><hr><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><p>字符串类型指CHAR、VARCHAR、BINARY、VARBINARY、BLOB、TEXT、ENUM和SET。该节描述了这些类型如何工作以及如何在查询中使用这些类型。</p><table><thead><tr><th align="left">类型</th><th align="left">大小</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">CHAR</td><td align="left">0-255 bytes</td><td align="left">定长字符串</td></tr><tr><td align="left">VARCHAR</td><td align="left">0-65535 bytes</td><td align="left">变长字符串</td></tr><tr><td align="left">TINYBLOB</td><td align="left">0-255 bytes</td><td align="left">不超过 255 个字符的二进制字符串</td></tr><tr><td align="left">TINYTEXT</td><td align="left">0-255 bytes</td><td align="left">短文本字符串</td></tr><tr><td align="left">BLOB</td><td align="left">0-65 535 bytes</td><td align="left">二进制形式的长文本数据</td></tr><tr><td align="left">TEXT</td><td align="left">0-65 535 bytes</td><td align="left">长文本数据</td></tr><tr><td align="left">MEDIUMBLOB</td><td align="left">0-16 777 215 bytes</td><td align="left">二进制形式的中等长度文本数据</td></tr><tr><td align="left">MEDIUMTEXT</td><td align="left">0-16 777 215 bytes</td><td align="left">中等长度文本数据</td></tr><tr><td align="left">LONGBLOB</td><td align="left">0-4 294 967 295 bytes</td><td align="left">二进制形式的极大文本数据</td></tr><tr><td align="left">LONGTEXT</td><td align="left">0-4 294 967 295 bytes</td><td align="left">极大文本数据</td></tr></tbody></table><p><strong>注意</strong>：char(n) 和 varchar(n) 中括号中 n 代表字符的个数，并不代表字节个数，比如 CHAR(30) 就可以存储 30 个字符。</p><p>CHAR 和 VARCHAR 类型类似，但它们保存和检索的方式不同。它们的最大长度和是否尾部空格被保留等方面也不同。在存储或检索过程中不进行大小写转换。</p><p>BINARY 和 VARBINARY 类似于 CHAR 和 VARCHAR，不同的是它们包含二进制字符串而不要非二进制字符串。也就是说，它们包含字节字符串而不是字符字符串。这说明它们没有字符集，并且排序和比较基于列值字节的数值值。</p><p>BLOB 是一个二进制大对象，可以容纳可变数量的数据。有 4 种 BLOB 类型：TINYBLOB、BLOB、MEDIUMBLOB 和 LONGBLOB。它们区别在于可容纳存储范围不同。</p><p>有 4 种 TEXT 类型：TINYTEXT、TEXT、MEDIUMTEXT 和 LONGTEXT。对应的这 4 种 BLOB 类型，可存储的最大长度不同，可根据实际情况选择。</p><h2 id="九、创建数据表"><a href="#九、创建数据表" class="headerlink" title="九、创建数据表"></a>九、创建数据表</h2><p>创建MySQL数据表需要以下信息：</p><ul><li>表名</li><li>表字段名</li><li>定义每个表字段</li></ul><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><p>以下为创建MySQL数据表的SQL通用语法：</p><p><code>CREATE TABLE table_name(column_name column_type):</code></p><p>以下例子中我们将在RUNOOB数据库中创建数据表runoob_tbl:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE IF NOT EXISTS `runoob_tbl`(<br>   `runoob_id` INT UNSIGNED AUTO_INCREMENT,<br>   `runoob_title` VARCHAR(100) NOT NULL,<br>   `runoob_author` VARCHAR(40) NOT NULL,<br>   `submission_date` DATE,<br>   PRIMARY KEY ( `runoob_id` )<br>)ENGINE=InnoDB DEFAULT CHARSET=utf8;<br></code></pre></td></tr></table></figure><p>实例解析：</p><ul><li>如果你不想字段为NULL可以设置字段的属性为NOT NULL，在操作数据库时如果输入该字段的数据为NULL，就会报错；</li><li>AUTO_INCREMENT定义列为自增的属性，一般用于主键，数值会自动+1；</li><li>PRIMARY KEY关键字用于定义为主键。您可以使用多列来定义主键，列间以逗号分隔。</li><li>ENGINE设置存储引擎，CHARSET设置编码。</li></ul><h3 id="通过命令提示符创建表"><a href="#通过命令提示符创建表" class="headerlink" title="通过命令提示符创建表"></a>通过命令提示符创建表</h3><p>通过 mysql&gt; 命令窗口可以很简单的创建MySQL数据表。你可以使用 SQL 语句 <strong>CREATE TABLE</strong> 来创建数据表。</p><h4 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h4><p>以下为创建数据表 runoob_tbl 实例:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">root@host# mysql -u root -p<br>Enter <span class="hljs-keyword">password</span>:*******<br>mysql&gt; use RUNOOB;<br><span class="hljs-keyword">Database</span> changed<br>mysql&gt; <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> runoob_tbl(<br>   -&gt; runoob_id <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>   -&gt; runoob_title <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>   -&gt; runoob_author <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">40</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>   -&gt; submission_date <span class="hljs-type">DATE</span>,<br>   -&gt; <span class="hljs-keyword">PRIMARY KEY</span> ( runoob_id )<br>   -&gt; )ENGINE=InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET=utf8;<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.16</span> sec)<br>mysql&gt;<br></code></pre></td></tr></table></figure><p><strong>注意：</strong>MySQL命令终止符为分号 <strong>;</strong> 。</p><p><strong>注意：</strong> <strong>-&gt;</strong> 是换行符标识，不要复制</p><h2 id="十、删除数据表"><a href="#十、删除数据表" class="headerlink" title="十、删除数据表"></a>十、删除数据表</h2><h3 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h3><p>以下为删除MySQL数据表的通用语法：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-built_in">table_name</span> ;<br></code></pre></td></tr></table></figure><h2 id="在命令提示窗口中删除数据表"><a href="#在命令提示窗口中删除数据表" class="headerlink" title="在命令提示窗口中删除数据表"></a>在命令提示窗口中删除数据表</h2><p>在mysql&gt;命令提示窗口中删除数据表SQL语句为 <strong>DROP TABLE</strong> ：</p><h3 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h3><p>以下实例删除了数据表runoob_tbl:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">root@host# mysql -u root -p<br>Enter password:*******<br>mysql&gt; use RUNOOB;<br>Database changed<br>mysql&gt; DROP TABLE runoob_tbl;<br>Query OK, 0 rows affected (0.8 sec)<br>mysql&gt;<br></code></pre></td></tr></table></figure><h2 id="十一、插入数据"><a href="#十一、插入数据" class="headerlink" title="十一、插入数据"></a>十一、插入数据</h2><h3 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h3><p>以下为向MySQL数据表插入数据通用的 <strong>INSERT INTO</strong> SQL语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INFO table_name (field1,field2,...fieldN)<br>VALUES<br>(value1, value2,...valueN);<br></code></pre></td></tr></table></figure><h3 id="通过命令提示窗口插入数据"><a href="#通过命令提示窗口插入数据" class="headerlink" title="通过命令提示窗口插入数据"></a>通过命令提示窗口插入数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs mysql">root@host# mysql -u root -p password;<br>Enter password:*******<br>mysql&gt; use RUNOOB;<br>Database changed<br>mysql&gt; Query OK, 1 rows affected, 1 warnings (0.01 sec)<br>mysql&gt; INSERT INTO runoob_tbl<br>    -&gt; (runoob_title, runoob_author, submission_date)<br>    -&gt; VALUES<br>    -&gt; (&quot;学习 PHP&quot;, &quot;菜鸟教程&quot;, NOW());<br>Query OK, 1 rows affected, 1 warnings (0.01 sec)<br>mysql&gt; INSERT INTO runoob_tbl<br>    -&gt; (runoob_title, runoob_author, submission_date)<br>    -&gt; VALUES<br>    -&gt; (&quot;学习 MySQL&quot;, &quot;菜鸟教程&quot;, NOW());<br>Query OK, 1 rows affected, 1 warnings (0.01 sec)<br>mysql&gt; INSERT INTO runoob_tbl<br>    -&gt; (runoob_title, runoob_author, submission_date)<br>    -&gt; VALUES<br>    -&gt; (&quot;JAVA 教程&quot;, &quot;RUNOOB.COM&quot;, &#x27;2016-05-06&#x27;);<br>Query OK, 1 rows affected (0.00 sec)<br>mysql&gt;<br></code></pre></td></tr></table></figure><h2 id="十二、查询数据"><a href="#十二、查询数据" class="headerlink" title="十二、查询数据"></a>十二、查询数据</h2><p>MySQL 数据库使用SQL SELECT语句来查询数据。</p><h3 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h3><p>以下为在MySQL数据库中查询数据通用的 SELECT 语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT column_name,column_name<br>FROM table_name<br>[WHERE Clause]<br>[LIMIT N][ OFFSET M]<br></code></pre></td></tr></table></figure><ul><li><p>查询语句中你可以使用一个或者多个表，表之间使用逗号(,)分割，并使用WHERE语句来设定查询条件。</p></li><li><p>SELECT 命令可以读取一条或者多条记录。</p></li><li><p>你可以使用星号（*）来代替其他字段，SELECT语句会返回表的所有字段数据</p></li><li><p>你可以使用 WHERE 语句来包含任何条件。</p></li><li><p>你可以使用 LIMIT 属性来设定返回的记录数。</p></li><li><p>你可以通过OFFSET指定SELECT语句开始查询的数据偏移量。默认情况下偏移量为0。通过命令提示符获取数据</p><p>以下实例我们将通过 SQL SELECT 命令来获取 MySQL 数据表 runoob_tbl 的数据：</p></li></ul><h3 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h3><p>  以下实例将返回数据表 runoob_tbl 的所有记录:</p><h3 id="读取数据表："><a href="#读取数据表：" class="headerlink" title="读取数据表："></a>读取数据表：</h3><p>  <code>select * from runoob_tbl;</code></p><p>  输出结果：</p><p>  <img src="https://www.runoob.com/wp-content/uploads/2014/03/DB742246-84F3-4447-BD43-6BAEADD7CA91.jpg" alt="img"></p><h2 id="十三、MySQL-WHERE字句"><a href="#十三、MySQL-WHERE字句" class="headerlink" title="十三、MySQL WHERE字句"></a>十三、MySQL WHERE字句</h2><p>我们知道从 MySQL 表中使用 SQL SELECT 语句来读取数据。</p><p>如需有条件地从表中选取数据，可将 WHERE 子句添加到 SELECT 语句中。</p><h3 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h3><p>以下是 SQL SELECT 语句使用 WHERE 子句从数据表中读取数据的通用语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT field1, field2,...fieldN FROM table_name1, table_name2...<br>[WHERE condition1 [AND [OR]] condition2.....<br></code></pre></td></tr></table></figure><ul><li>查询语句中你可以使用一个或者多个表，表之间使用逗号**,** 分割，并使用WHERE语句来设定查询条件。</li><li>你可以在 WHERE 子句中指定任何条件。</li><li>你可以使用 AND 或者 OR 指定一个或多个条件。</li><li>WHERE 子句也可以运用于 SQL 的 DELETE 或者 UPDATE 命令。</li><li>WHERE 子句类似于程序语言中的 if 条件，根据 MySQL 表中的字段值来读取指定的数据。</li></ul><p>以下为操作符列表，可用于 WHERE 子句中。</p><p>下表中实例假定 A 为 10, B 为 20</p><table><thead><tr><th align="left">操作符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">&#x3D;</td><td align="left">等号，检测两个值是否相等，如果相等返回true</td><td align="left">(A &#x3D; B) 返回false。</td></tr><tr><td align="left">&lt;&gt;, !&#x3D;</td><td align="left">不等于，检测两个值是否相等，如果不相等返回true</td><td align="left">(A !&#x3D; B) 返回 true。</td></tr><tr><td align="left">&gt;</td><td align="left">大于号，检测左边的值是否大于右边的值, 如果左边的值大于右边的值返回true</td><td align="left">(A &gt; B) 返回false。</td></tr><tr><td align="left">&lt;</td><td align="left">小于号，检测左边的值是否小于右边的值, 如果左边的值小于右边的值返回true</td><td align="left">(A &lt; B) 返回 true。</td></tr><tr><td align="left">&gt;&#x3D;</td><td align="left">大于等于号，检测左边的值是否大于或等于右边的值, 如果左边的值大于或等于右边的值返回true</td><td align="left">(A &gt;&#x3D; B) 返回false。</td></tr><tr><td align="left">&lt;&#x3D;</td><td align="left">小于等于号，检测左边的值是否小于或等于右边的值, 如果左边的值小于或等于右边的值返回true</td><td align="left">(A &lt;&#x3D; B) 返回 true。</td></tr></tbody></table><p>如果我们想在 MySQL 数据表中读取指定的数据，WHERE 子句是非常有用的。</p><p>使用主键来作为 WHERE 子句的条件查询是非常快速的。</p><p>如果给定的条件在表中没有任何匹配的记录，那么查询不会返回任何数据。</p><h3 id="从命令提示符中读取数据"><a href="#从命令提示符中读取数据" class="headerlink" title="从命令提示符中读取数据"></a>从命令提示符中读取数据</h3><p>我们将在SQL SELECT语句使用WHERE子句来读取MySQL数据表 runoob_tbl 中的数据：</p><p>实例</p><p>以下实例将读取 runoob_tbl 表中 runoob_author 字段值为 Sanjay 的所有记录：</p><h3 id="SQL-SELECT-WHERE-子句"><a href="#SQL-SELECT-WHERE-子句" class="headerlink" title="SQL SELECT WHERE 子句"></a>SQL SELECT WHERE 子句</h3><p>SELECT * from runoob_tbl WHERE runoob_author&#x3D;’菜鸟教程’;</p><p>输出结果：</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/03/CED9CA9C-E4C7-4809-875C-A7E48F430059.jpg" alt="img"></p><p>MySQL 的 WHERE 子句的字符串比较是不区分大小写的。 你可以使用 BINARY 关键字来设定 WHERE 子句的字符串比较是区分大小写的。</p><p>如下实例:</p><h3 id="BINARY-关键字"><a href="#BINARY-关键字" class="headerlink" title="BINARY 关键字"></a>BINARY 关键字</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * from runoob_tbl WHERE BINARY runoob_author=&#x27;runoob.com&#x27;;<br>Empty set (0.01 sec)<br> <br>mysql&gt; SELECT * from runoob_tbl WHERE BINARY runoob_author=&#x27;RUNOOB.COM&#x27;;<br>+-----------+---------------+---------------+-----------------+<br>| runoob_id | runoob_title  | runoob_author | submission_date |<br>+-----------+---------------+---------------+-----------------+<br>| 3         | JAVA 教程   | RUNOOB.COM    | 2016-05-06      |<br>| 4         | 学习 Python | RUNOOB.COM    | 2016-03-06      |<br>+-----------+---------------+---------------+-----------------+<br>2 rows in set (0.01 sec)<br></code></pre></td></tr></table></figure><p>实例中使用了 <strong>BINARY</strong> 关键字，是区分大小写的，所以 <strong>runoob_author&#x3D;’runoob.com’</strong> 的查询条件是没有数据的。</p><h2 id="十四、MySQL-UPDATE更新"><a href="#十四、MySQL-UPDATE更新" class="headerlink" title="十四、MySQL UPDATE更新"></a>十四、MySQL UPDATE更新</h2><p>如果我们需要修改或更新 MySQL 中的数据，我们可以使用 SQL UPDATE 命令来操作。</p><h3 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h3><p>以下是UPDATE命令修改MySQL数据表数据通用的SQL语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">UPDATE table_name SET field1=new-value1, field2=new-value2<br>[WHERE Clause]<br></code></pre></td></tr></table></figure><ul><li>你可以同时更新一个或多个字段。</li><li>你可以在 WHERE 子句中指定任何条件。</li><li>你可以在一个单独表中同时更新数据。</li></ul><p>当你需要更新数据表中指定行的数据时 WHERE 子句是非常有用的。</p><p>通过命令提示符更新数据</p><p>以下我们将在 SQL UPDATE 命令使用 WHERE 子句来更新 runoob_tbl 表中指定的数据：</p><h3 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h3><p>以下实例将更新数据表中 runoob_id 为 3 的 runoob_title 字段值：</p><h3 id="SQL-UPDATE-语句："><a href="#SQL-UPDATE-语句：" class="headerlink" title="SQL UPDATE 语句："></a>SQL UPDATE 语句：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; UPDATE runoob_tbl SET runoob_title=&#x27;学习 C++&#x27; WHERE runoob_id=3;<br>Query OK, 1 rows affected (0.01 sec)<br> <br>mysql&gt; SELECT * from runoob_tbl WHERE runoob_id=3;<br>+-----------+--------------+---------------+-----------------+<br>| runoob_id | runoob_title | runoob_author | submission_date |<br>+-----------+--------------+---------------+-----------------+<br>| 3         | 学习 C++   | RUNOOB.COM    | 2016-05-06      |<br>+-----------+--------------+---------------+-----------------+<br>1 rows in set (0.01 sec)<br></code></pre></td></tr></table></figure><p>从结果上看，runoob_id 为 3 的 runoob_title 已被修改</p><h2 id="十五、DELETE语句"><a href="#十五、DELETE语句" class="headerlink" title="十五、DELETE语句"></a>十五、DELETE语句</h2><p>你可以使用 SQL 的 DELETE FROM 命令来删除 MySQL 数据表中的记录。</p><p>你可以在 <strong>mysql&gt;</strong> 命令提示符或 PHP 脚本中执行该命令。</p><h3 id="语法-8"><a href="#语法-8" class="headerlink" title="语法"></a>语法</h3><p>以下是SQL DELETE语句从MySQL数据表中删除数据的通用语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELETE FROM table_name [WHERE Clause]<br></code></pre></td></tr></table></figure><ul><li>如果没有指定 WHERE 子句，MySQL 表中的所有记录将被删除。</li><li>你可以在 WHERE 子句中指定任何条件</li><li>您可以在单个表中一次性删除记录。</li></ul><p>当你想删除数据表中指定的记录时 WHERE 子句是非常有用的。</p><h3 id="从命令行中删除数据"><a href="#从命令行中删除数据" class="headerlink" title="从命令行中删除数据"></a>从命令行中删除数据</h3><p>这里我们将在 SQL DELETE 命令中使用 WHERE 子句来删除 MySQL 数据表 runoob_tbl 所选的数据。</p><h3 id="实例-7"><a href="#实例-7" class="headerlink" title="实例"></a>实例</h3><p>以下实例将删除 runoob_tbl 表中 runoob_id 为3 的记录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; use RUNOOB;<br>Database changed<br>mysql&gt; DELETE FROM runoob_tbl WHERE runoob_id=3;<br>Query OK, 1 row affected (0.23 sec)<br><br></code></pre></td></tr></table></figure><h2 id="十六、LIKE字句"><a href="#十六、LIKE字句" class="headerlink" title="十六、LIKE字句"></a>十六、LIKE字句</h2><p>我们知道在 MySQL 中使用 SQL SELECT 命令来读取数据， 同时我们可以在 SELECT 语句中使用 WHERE 子句来获取指定的记录。</p><p>WHERE 子句中可以使用等号 <strong>&#x3D;</strong> 来设定获取数据的条件，如 “runoob_author &#x3D; ‘RUNOOB.COM’”。</p><p>但是有时候我们需要获取 runoob_author 字段含有&#x3D;&#x3D;”COM”&#x3D;&#x3D; 字符的所有记录，这时我们就需要在 WHERE 子句中使用 SQL LIKE 子句。</p><p>SQL LIKE 子句中使用百分号 **%**字符来表示任意字符，类似于UNIX或正则表达式中的星号 *****。</p><p>如果没有使用百分号 <strong>%</strong>, LIKE 子句与等号 <strong>&#x3D;</strong> 的效果是一样的。</p><h3 id="语法-9"><a href="#语法-9" class="headerlink" title="语法"></a>语法</h3><p>以下是 SQL SELECT 语句使用 LIKE 子句从数据表中读取数据的通用语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT field1, field2,...fieldN <br>FROM table_name<br>WHERE field1 LIKE condition1 [AND [OR]] filed2 = &#x27;somevalue&#x27;<br></code></pre></td></tr></table></figure><ul><li><p>你可以在 WHERE 子句中指定任何条件。</p></li><li><p>你可以在 WHERE 子句中使用LIKE子句。</p></li><li><p>你可以使用&#x3D;&#x3D;LIKE子句代替等号 **&#x3D;**。&#x3D;&#x3D;</p></li><li><p>LIKE 通常与 <strong>%</strong> 一同使用，类似于一个元字符的搜索。</p></li><li><p>你可以使用 AND 或者 OR 指定一个或多个条件。</p></li><li><p>你可以在 DELETE 或 UPDATE 命令中使用 WHERE…LIKE 子句来指定条件。</p></li></ul><h3 id="在命令提示符中使用-LIKE-子句"><a href="#在命令提示符中使用-LIKE-子句" class="headerlink" title="在命令提示符中使用 LIKE 子句"></a>在命令提示符中使用 LIKE 子句</h3><p>  以下我们将在 SQL SELECT 命令中使用 WHERE…LIKE 子句来从MySQL数据表 runoob_tbl 中读取数据。</p><p>  实例</p><p>  以下是我们将 runoob_tbl 表中获取 runoob_author 字段中以 <strong>COM</strong> 为结尾的的所有记录：</p><h3 id="SQL-LIKE-语句："><a href="#SQL-LIKE-语句：" class="headerlink" title="SQL LIKE 语句："></a>SQL LIKE 语句：</h3>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; use RUNOOB;<br>Database changed<br>mysql&gt; SELECT * from runoob_tbl  WHERE runoob_author LIKE &#x27;%COM&#x27;;<br>+-----------+---------------+---------------+-----------------+<br>| runoob_id | runoob_title  | runoob_author | submission_date |<br>+-----------+---------------+---------------+-----------------+<br>| 3         | 学习 Java   | RUNOOB.COM    | 2015-05-01      |<br>| 4         | 学习 Python | RUNOOB.COM    | 2016-03-06      |<br>+-----------+---------------+---------------+-----------------+<br>2 rows in set (0.01 sec)<br></code></pre></td></tr></table></figure><h2 id="十七、UNION操作符"><a href="#十七、UNION操作符" class="headerlink" title="十七、UNION操作符"></a>十七、UNION操作符</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>MySQL UNION 操作符用于连接&#x3D;&#x3D;两个以上的 SELECT 语句&#x3D;&#x3D;的结果组合到一个结果集合中。多个 SELECT 语句会删除重复的数据。</p><h3 id="语法-10"><a href="#语法-10" class="headerlink" title="语法"></a>语法</h3><p>MySQL UNION 操作符语法格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT expression1, expression2, ... expression_n<br>FROM tables<br>[WHERE conditions]<br>UNION [ALL | DISTINCT]<br>SELECT expression1, expression2, ... expression_n<br>FROM tables<br>[WHERE conditions];<br></code></pre></td></tr></table></figure><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul><li><strong>expression1, expression2, … expression_n</strong>: 要检索的列。</li><li><strong>tables:</strong> 要检索的数据表。</li><li><strong>WHERE conditions:</strong> 可选， 检索条件。</li><li><strong>DISTINCT:</strong> 可选，删除结果集中重复的数据。默认情况下 UNION 操作符已经删除了重复数据，所以 DISTINCT 修饰符对结果没啥影响。</li><li><strong>ALL:</strong> 可选，返回所有结果集，包含重复数据。</li></ul><h3 id="演示数据库"><a href="#演示数据库" class="headerlink" title="演示数据库"></a>演示数据库</h3><p>在本教程中，我们将使用 RUNOOB 样本数据库。</p><p>下面是选自 “Websites” 表的数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM Websites;<br>+----+--------------+---------------------------+-------+---------+<br>| id | name         | url                       | alexa | country |<br>+----+--------------+---------------------------+-------+---------+<br>| 1  | Google       | https://www.google.cm/    | 1     | USA     |<br>| 2  | 淘宝          | https://www.taobao.com/   | 13    | CN      |<br>| 3  | 菜鸟教程      | http://www.runoob.com/    | 4689  | CN      |<br>| 4  | 微博          | http://weibo.com/         | 20    | CN      |<br>| 5  | Facebook     | https://www.facebook.com/ | 3     | USA     |<br>| 7  | stackoverflow | http://stackoverflow.com/ |   0 | IND     |<br>+----+---------------+---------------------------+-------+---------+<br></code></pre></td></tr></table></figure><p>下面是 “apps” APP 的数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM apps;<br>+----+------------+-------------------------+---------+<br>| id | app_name   | url                     | country |<br>+----+------------+-------------------------+---------+<br>|  1 | QQ APP     | http://im.qq.com/       | CN      |<br>|  2 | 微博 APP | http://weibo.com/       | CN      |<br>|  3 | 淘宝 APP | https://www.taobao.com/ | CN      |<br>+----+------------+-------------------------+---------+<br>3 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="SQL-UNION-实例"><a href="#SQL-UNION-实例" class="headerlink" title="SQL UNION 实例"></a>SQL UNION 实例</h3><p>下面的 SQL 语句从 “Websites” 和 “apps” 表中选取所有<strong>不同的</strong>country（只有不同的值）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT country FROM Websites<br>UNION<br>SELECT country FROM apps<br>ORDER BY country;<br></code></pre></td></tr></table></figure><p>执行以上 SQL 输出结果如下：</p><p><img src="https://www.runoob.com/wp-content/uploads/2013/09/union1.jpg" alt="img"></p><p><strong>注释：</strong>UNION 不能用于列出两个表中所有的country。如果一些网站和APP来自同一个国家，每个国家只会列出一次。UNION 只会选取不同的值。请使用 UNION ALL 来选取重复的值！</p><h3 id="SQL-UNION-ALL-实例"><a href="#SQL-UNION-ALL-实例" class="headerlink" title="SQL UNION ALL 实例"></a>SQL UNION ALL 实例</h3><p>下面的 SQL 语句使用 UNION ALL 从 “Websites” 和 “apps” 表中选取<strong>所有的</strong>country（也有重复的值）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT country FROM Websites<br>UNION ALL<br>SELECT country FROM apps<br>ORDER BY country;<br></code></pre></td></tr></table></figure><p>执行以上 SQL 输出结果如下：</p><p><img src="https://www.runoob.com/wp-content/uploads/2013/09/union2.jpg" alt="img"></p><h3 id="带有-WHERE-的-SQL-UNION-ALL"><a href="#带有-WHERE-的-SQL-UNION-ALL" class="headerlink" title="带有 WHERE 的 SQL UNION ALL"></a>带有 WHERE 的 SQL UNION ALL</h3><p>下面的 SQL 语句使用 UNION ALL 从 “Websites” 和 “apps” 表中选取<strong>所有的</strong>中国(CN)的数据（也有重复的值）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT country, name FROM Websites<br>WHERE country=&#x27;CN&#x27;<br>UNION ALL<br>SELECT country, app_name FROM apps<br>WHERE country=&#x27;CN&#x27;<br>ORDER BY country;<br></code></pre></td></tr></table></figure><p>执行以上 SQL 输出结果如下：</p><p><img src="https://www.runoob.com/wp-content/uploads/2013/09/AAA99C7B-36A5-43FB-B489-F8CE63B62C71.jpg" alt="img"></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
